
Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000932  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00000932  000009a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b18  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eda  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f3  00000000  00000000  00001abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000637  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a8  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003506  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  7a:	0c 94 97 04 	jmp	0x92e	; 0x92e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
  82:	66 23       	and	r22, r22
  84:	11 f0       	breq	.+4      	; 0x8a <output+0x8>
  86:	c0 9a       	sbi	0x18, 0	; 24
  88:	01 c0       	rjmp	.+2      	; 0x8c <output+0xa>
  8a:	c0 98       	cbi	0x18, 0	; 24
  8c:	c1 98       	cbi	0x18, 1	; 24
  8e:	82 bb       	out	0x12, r24	; 18
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	81 bb       	out	0x11, r24	; 17
  94:	c2 9a       	sbi	0x18, 2	; 24
  96:	00 00       	nop
  98:	00 00       	nop
  9a:	00 00       	nop
  9c:	c2 98       	cbi	0x18, 2	; 24
  9e:	08 95       	ret

000000a0 <write>:
  a0:	c0 98       	cbi	0x18, 0	; 24
  a2:	c1 9a       	sbi	0x18, 1	; 24
  a4:	11 ba       	out	0x11, r1	; 17
  a6:	90 b3       	in	r25, 0x10	; 16
  a8:	c2 9a       	sbi	0x18, 2	; 24
  aa:	00 00       	nop
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	11 ba       	out	0x11, r1	; 17
  b2:	90 b3       	in	r25, 0x10	; 16
  b4:	c2 98       	cbi	0x18, 2	; 24
  b6:	99 23       	and	r25, r25
  b8:	9c f3       	brlt	.-26     	; 0xa0 <write>
  ba:	0e 94 41 00 	call	0x82	; 0x82 <output>
  be:	08 95       	ret

000000c0 <wait_avr>:
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	cf 93       	push	r28
  ca:	6b 01       	movw	r12, r22
  cc:	7c 01       	movw	r14, r24
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	83 bf       	out	0x33, r24	; 51
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a9 01       	movw	r20, r18
  d8:	c7 01       	movw	r24, r14
  da:	b6 01       	movw	r22, r12
  dc:	0e 94 01 04 	call	0x802	; 0x802 <__gesf2>
  e0:	18 16       	cp	r1, r24
  e2:	cc f4       	brge	.+50     	; 0x116 <wait_avr+0x56>
  e4:	c3 ef       	ldi	r28, 0xF3	; 243
  e6:	c2 bf       	out	0x32, r28	; 50
  e8:	88 b7       	in	r24, 0x38	; 56
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	88 bf       	out	0x38, r24	; 56
  ee:	08 b6       	in	r0, 0x38	; 56
  f0:	00 fe       	sbrs	r0, 0
  f2:	fd cf       	rjmp	.-6      	; 0xee <wait_avr+0x2e>
  f4:	2d ec       	ldi	r18, 0xCD	; 205
  f6:	3c ec       	ldi	r19, 0xCC	; 204
  f8:	4c ec       	ldi	r20, 0xCC	; 204
  fa:	5d e3       	ldi	r21, 0x3D	; 61
  fc:	c7 01       	movw	r24, r14
  fe:	b6 01       	movw	r22, r12
 100:	0e 94 94 02 	call	0x528	; 0x528 <__subsf3>
 104:	6b 01       	movw	r12, r22
 106:	7c 01       	movw	r14, r24
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	a9 01       	movw	r20, r18
 10e:	0e 94 01 04 	call	0x802	; 0x802 <__gesf2>
 112:	18 16       	cp	r1, r24
 114:	44 f3       	brlt	.-48     	; 0xe6 <wait_avr+0x26>
 116:	13 be       	out	0x33, r1	; 51
 118:	cf 91       	pop	r28
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	08 95       	ret

00000124 <lcd_init>:
 124:	b8 9a       	sbi	0x17, 0	; 23
 126:	b9 9a       	sbi	0x17, 1	; 23
 128:	ba 9a       	sbi	0x17, 2	; 23
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	91 e4       	ldi	r25, 0x41	; 65
 132:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	0e 94 41 00 	call	0x82	; 0x82 <output>
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 ea       	ldi	r24, 0xA0	; 160
 144:	90 e4       	ldi	r25, 0x40	; 64
 146:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	0e 94 41 00 	call	0x82	; 0x82 <output>
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	9f e3       	ldi	r25, 0x3F	; 63
 15a:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	8c e3       	ldi	r24, 0x3C	; 60
 162:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 17e:	08 95       	ret

00000180 <lcd_clr>:
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 188:	08 95       	ret

0000018a <lcd_pos>:
 18a:	cf 93       	push	r28
 18c:	c6 2f       	mov	r28, r22
 18e:	98 e2       	ldi	r25, 0x28	; 40
 190:	89 9f       	mul	r24, r25
 192:	c0 0d       	add	r28, r0
 194:	11 24       	eor	r1, r1
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 19e:	cc 23       	and	r28, r28
 1a0:	31 f0       	breq	.+12     	; 0x1ae <lcd_pos+0x24>
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	84 e1       	ldi	r24, 0x14	; 20
 1a6:	0e 94 50 00 	call	0xa0	; 0xa0 <write>
 1aa:	c1 50       	subi	r28, 0x01	; 1
 1ac:	d1 f7       	brne	.-12     	; 0x1a2 <lcd_pos+0x18>
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_puts2>:

void
lcd_puts2(const char *s)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
 1b6:	ec 01       	movw	r28, r24
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	fc 01       	movw	r30, r24
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	31 f0       	breq	.+12     	; 0x1ce <lcd_puts2+0x1c>
		write(c, 1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	0e 94 50 00 	call	0xa0	; 0xa0 <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
 1c8:	89 91       	ld	r24, Y+
 1ca:	81 11       	cpse	r24, r1
 1cc:	fa cf       	rjmp	.-12     	; 0x1c2 <lcd_puts2+0x10>
		write(c, 1);
	}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <pressed>:
#include "avr.h"
#include "keypad.h"

int pressed(int r, int c) {
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	8c 01       	movw	r16, r24
 1e2:	f6 2e       	mov	r15, r22
	PORTC = 0;
 1e4:	15 ba       	out	0x15, r1	; 21
	wait_avr(1);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	9f e3       	ldi	r25, 0x3F	; 63
 1ee:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
	DDRC = 0;
 1f2:	14 ba       	out	0x14, r1	; 20
	wait_avr(1);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e8       	ldi	r24, 0x80	; 128
 1fa:	9f e3       	ldi	r25, 0x3F	; 63
 1fc:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
	
	SET_BIT(DDRC, c);
 200:	84 b3       	in	r24, 0x14	; 20
 202:	c1 e0       	ldi	r28, 0x01	; 1
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	9e 01       	movw	r18, r28
 208:	02 c0       	rjmp	.+4      	; 0x20e <pressed+0x3a>
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	fa 94       	dec	r15
 210:	e2 f7       	brpl	.-8      	; 0x20a <pressed+0x36>
 212:	79 01       	movw	r14, r18
 214:	82 2b       	or	r24, r18
 216:	84 bb       	out	0x14, r24	; 20
	wait_avr(1);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	80 e8       	ldi	r24, 0x80	; 128
 21e:	9f e3       	ldi	r25, 0x3F	; 63
 220:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
	CLR_BIT(PORTC, c);
 224:	85 b3       	in	r24, 0x15	; 21
 226:	e0 94       	com	r14
 228:	e8 22       	and	r14, r24
 22a:	e5 ba       	out	0x15, r14	; 21
	wait_avr(1);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	9f e3       	ldi	r25, 0x3F	; 63
 234:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
	
	SET_BIT(PORTC, r+4);
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	0c 5f       	subi	r16, 0xFC	; 252
 23c:	1f 4f       	sbci	r17, 0xFF	; 255
 23e:	00 2e       	mov	r0, r16
 240:	02 c0       	rjmp	.+4      	; 0x246 <pressed+0x72>
 242:	cc 0f       	add	r28, r28
 244:	dd 1f       	adc	r29, r29
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <pressed+0x6e>
 24a:	c8 2b       	or	r28, r24
 24c:	c5 bb       	out	0x15, r28	; 21
	wait_avr(1);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	9f e3       	ldi	r25, 0x3F	; 63
 256:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
	if (GET_BIT(PINC, r+4))
 25a:	23 b3       	in	r18, 0x13	; 19
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <pressed+0x90>
 260:	35 95       	asr	r19
 262:	27 95       	ror	r18
 264:	0a 95       	dec	r16
 266:	e2 f7       	brpl	.-8      	; 0x260 <pressed+0x8c>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	20 ff       	sbrs	r18, 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <pressed+0xa0>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
	return 0;

	return 1;
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	08 95       	ret

00000282 <get_key>:

int get_key() {
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
	int r, c;
	for (r = 0; r < 4; ++r) {
 28a:	00 e0       	ldi	r16, 0x00	; 0
 28c:	10 e0       	ldi	r17, 0x00	; 0
 28e:	18 c0       	rjmp	.+48     	; 0x2c0 <get_key+0x3e>
		for (c = 0; c < 4; ++c) {
			if (pressed(c,r))
 290:	b8 01       	movw	r22, r16
 292:	ce 01       	movw	r24, r28
 294:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <pressed>
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	49 f0       	breq	.+18     	; 0x2ae <get_key+0x2c>
			return 1 + (r*4) + c;
 29c:	c8 01       	movw	r24, r16
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	8c 0f       	add	r24, r28
 2aa:	9d 1f       	adc	r25, r29
 2ac:	0c c0       	rjmp	.+24     	; 0x2c6 <get_key+0x44>
}

int get_key() {
	int r, c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
 2ae:	21 96       	adiw	r28, 0x01	; 1
 2b0:	c4 30       	cpi	r28, 0x04	; 4
 2b2:	d1 05       	cpc	r29, r1
 2b4:	69 f7       	brne	.-38     	; 0x290 <get_key+0xe>
	return 1;
}

int get_key() {
	int r, c;
	for (r = 0; r < 4; ++r) {
 2b6:	0f 5f       	subi	r16, 0xFF	; 255
 2b8:	1f 4f       	sbci	r17, 0xFF	; 255
 2ba:	04 30       	cpi	r16, 0x04	; 4
 2bc:	11 05       	cpc	r17, r1
 2be:	19 f0       	breq	.+6      	; 0x2c6 <get_key+0x44>
	return 0;

	return 1;
}

int get_key() {
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	e5 cf       	rjmp	.-54     	; 0x290 <get_key+0xe>
			if (pressed(c,r))
			return 1 + (r*4) + c;
		}
	}
	return 0;
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <play_note>:
			{PAUSE,S}, {F,EI}, {D,S}, {F,S}, {D,S}, {F,EI},
			{E,EI}, {PAUSE,S/4}, {E,EI}, {PAUSE,S/4}, {E,EI}, {C,S}, {E,S},
			{PAUSE,S}, {E,EI}, {C,S}, {E,S}, {C,S}, {E,EI}
			};
	
void play_note(int freq, float duration) {
 2d0:	4f 92       	push	r4
 2d2:	5f 92       	push	r5
 2d4:	6f 92       	push	r6
 2d6:	7f 92       	push	r7
 2d8:	8f 92       	push	r8
 2da:	9f 92       	push	r9
 2dc:	af 92       	push	r10
 2de:	bf 92       	push	r11
 2e0:	cf 92       	push	r12
 2e2:	df 92       	push	r13
 2e4:	ef 92       	push	r14
 2e6:	ff 92       	push	r15
 2e8:	6a 01       	movw	r12, r20
 2ea:	7b 01       	movw	r14, r22
	if (PAUSE != freq) {
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	91 05       	cpc	r25, r1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <play_note+0x24>
 2f2:	5b c0       	rjmp	.+182    	; 0x3aa <play_note+0xda>
		float TH = (1.0 / freq) * 1000;
 2f4:	bc 01       	movw	r22, r24
 2f6:	99 0f       	add	r25, r25
 2f8:	88 0b       	sbc	r24, r24
 2fa:	99 0b       	sbc	r25, r25
 2fc:	0e 94 75 03 	call	0x6ea	; 0x6ea <__floatsisf>
 300:	9b 01       	movw	r18, r22
 302:	ac 01       	movw	r20, r24
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	9f e3       	ldi	r25, 0x3F	; 63
 30c:	0e 94 01 03 	call	0x602	; 0x602 <__divsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	4a e7       	ldi	r20, 0x7A	; 122
 316:	54 e4       	ldi	r21, 0x44	; 68
 318:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3>
 31c:	4b 01       	movw	r8, r22
 31e:	5c 01       	movw	r10, r24
		float TL = TH;
		duration = duration + (duration*( 2000*(1.0/GL) - (TL+TH) ) / (TL+TH));
 320:	9b 01       	movw	r18, r22
 322:	ac 01       	movw	r20, r24
 324:	0e 94 95 02 	call	0x52a	; 0x52a <__addsf3>
 328:	2b 01       	movw	r4, r22
 32a:	3c 01       	movw	r6, r24
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	65 e8       	ldi	r22, 0x85	; 133
 332:	77 e3       	ldi	r23, 0x37	; 55
 334:	8a e9       	ldi	r24, 0x9A	; 154
 336:	90 e4       	ldi	r25, 0x40	; 64
 338:	0e 94 94 02 	call	0x528	; 0x528 <__subsf3>
 33c:	a7 01       	movw	r20, r14
 33e:	96 01       	movw	r18, r12
 340:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3>
 344:	a3 01       	movw	r20, r6
 346:	92 01       	movw	r18, r4
 348:	0e 94 01 03 	call	0x602	; 0x602 <__divsf3>
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	c7 01       	movw	r24, r14
 352:	b6 01       	movw	r22, r12
 354:	0e 94 95 02 	call	0x52a	; 0x52a <__addsf3>
 358:	2b 01       	movw	r4, r22
 35a:	3c 01       	movw	r6, r24
		float i;
		for (i = 0; i < duration; i += 0.1) {
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	a9 01       	movw	r20, r18
 362:	0e 94 01 04 	call	0x802	; 0x802 <__gesf2>
 366:	18 16       	cp	r1, r24
 368:	84 f5       	brge	.+96     	; 0x3ca <play_note+0xfa>
 36a:	c1 2c       	mov	r12, r1
 36c:	d1 2c       	mov	r13, r1
 36e:	76 01       	movw	r14, r12
			SET_BIT(PORTA, 0);
 370:	d8 9a       	sbi	0x1b, 0	; 27
			wait_avr(TH);
 372:	c5 01       	movw	r24, r10
 374:	b4 01       	movw	r22, r8
 376:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
			CLR_BIT(PORTA, 0);
 37a:	d8 98       	cbi	0x1b, 0	; 27
			wait_avr(TL);
 37c:	c5 01       	movw	r24, r10
 37e:	b4 01       	movw	r22, r8
 380:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
	if (PAUSE != freq) {
		float TH = (1.0 / freq) * 1000;
		float TL = TH;
		duration = duration + (duration*( 2000*(1.0/GL) - (TL+TH) ) / (TL+TH));
		float i;
		for (i = 0; i < duration; i += 0.1) {
 384:	2d ec       	ldi	r18, 0xCD	; 205
 386:	3c ec       	ldi	r19, 0xCC	; 204
 388:	4c ec       	ldi	r20, 0xCC	; 204
 38a:	5d e3       	ldi	r21, 0x3D	; 61
 38c:	c7 01       	movw	r24, r14
 38e:	b6 01       	movw	r22, r12
 390:	0e 94 95 02 	call	0x52a	; 0x52a <__addsf3>
 394:	6b 01       	movw	r12, r22
 396:	7c 01       	movw	r14, r24
 398:	9b 01       	movw	r18, r22
 39a:	ac 01       	movw	r20, r24
 39c:	c3 01       	movw	r24, r6
 39e:	b2 01       	movw	r22, r4
 3a0:	0e 94 01 04 	call	0x802	; 0x802 <__gesf2>
 3a4:	18 16       	cp	r1, r24
 3a6:	24 f3       	brlt	.-56     	; 0x370 <play_note+0xa0>
 3a8:	10 c0       	rjmp	.+32     	; 0x3ca <play_note+0xfa>
			CLR_BIT(PORTA, 0);
			wait_avr(TL);
		}
	}
	else
		wait_avr(duration * (1.0/GL) * 20000);
 3aa:	27 e0       	ldi	r18, 0x07	; 7
 3ac:	3b ee       	ldi	r19, 0xEB	; 235
 3ae:	4d e1       	ldi	r20, 0x1D	; 29
 3b0:	5b e3       	ldi	r21, 0x3B	; 59
 3b2:	c7 01       	movw	r24, r14
 3b4:	b6 01       	movw	r22, r12
 3b6:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3>
 3ba:	20 e0       	ldi	r18, 0x00	; 0
 3bc:	30 e4       	ldi	r19, 0x40	; 64
 3be:	4c e9       	ldi	r20, 0x9C	; 156
 3c0:	56 e4       	ldi	r21, 0x46	; 70
 3c2:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3>
 3c6:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
}
 3ca:	ff 90       	pop	r15
 3cc:	ef 90       	pop	r14
 3ce:	df 90       	pop	r13
 3d0:	cf 90       	pop	r12
 3d2:	bf 90       	pop	r11
 3d4:	af 90       	pop	r10
 3d6:	9f 90       	pop	r9
 3d8:	8f 90       	pop	r8
 3da:	7f 90       	pop	r7
 3dc:	6f 90       	pop	r6
 3de:	5f 90       	pop	r5
 3e0:	4f 90       	pop	r4
 3e2:	08 95       	ret

000003e4 <play_song>:

void play_song(int key) {
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
	int i;
	int n;
	
	switch(key) {
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	91 05       	cpc	r25, r1
 3f0:	19 f0       	breq	.+6      	; 0x3f8 <play_song+0x14>
 3f2:	02 97       	sbiw	r24, 0x02	; 2
 3f4:	91 f0       	breq	.+36     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f6:	22 c0       	rjmp	.+68     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3f8:	c8 e4       	ldi	r28, 0x48	; 72
 3fa:	d1 e0       	ldi	r29, 0x01	; 1
 3fc:	02 ea       	ldi	r16, 0xA2	; 162
 3fe:	11 e0       	ldi	r17, 0x01	; 1
		case 1:
			n = sizeof(DA_FUNK)/ sizeof(DA_FUNK[0]);
			for (i = 0; i < n; ++i)
				play_note(DA_FUNK[i].freq, DA_FUNK[i].duration);
 400:	4a 81       	ldd	r20, Y+2	; 0x02
 402:	5b 81       	ldd	r21, Y+3	; 0x03
 404:	6c 81       	ldd	r22, Y+4	; 0x04
 406:	7d 81       	ldd	r23, Y+5	; 0x05
 408:	88 81       	ld	r24, Y
 40a:	99 81       	ldd	r25, Y+1	; 0x01
 40c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <play_note>
 410:	26 96       	adiw	r28, 0x06	; 6
	int n;
	
	switch(key) {
		case 1:
			n = sizeof(DA_FUNK)/ sizeof(DA_FUNK[0]);
			for (i = 0; i < n; ++i)
 412:	0c 17       	cp	r16, r28
 414:	1d 07       	cpc	r17, r29
 416:	a1 f7       	brne	.-24     	; 0x400 <__LOCK_REGION_LENGTH__>
 418:	21 c0       	rjmp	.+66     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 41a:	cc ea       	ldi	r28, 0xAC	; 172
 41c:	d0 e0       	ldi	r29, 0x00	; 0
 41e:	08 e4       	ldi	r16, 0x48	; 72
 420:	11 e0       	ldi	r17, 0x01	; 1
				play_note(DA_FUNK[i].freq, DA_FUNK[i].duration);
			break;
		case 2:
			n = sizeof(STAR_MAN)/ sizeof(STAR_MAN[0]);
			for (i = 0; i < n; ++i)
				play_note(STAR_MAN[i].freq, STAR_MAN[i].duration);
 422:	4a 81       	ldd	r20, Y+2	; 0x02
 424:	5b 81       	ldd	r21, Y+3	; 0x03
 426:	6c 81       	ldd	r22, Y+4	; 0x04
 428:	7d 81       	ldd	r23, Y+5	; 0x05
 42a:	88 81       	ld	r24, Y
 42c:	99 81       	ldd	r25, Y+1	; 0x01
 42e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <play_note>
 432:	26 96       	adiw	r28, 0x06	; 6
			for (i = 0; i < n; ++i)
				play_note(DA_FUNK[i].freq, DA_FUNK[i].duration);
			break;
		case 2:
			n = sizeof(STAR_MAN)/ sizeof(STAR_MAN[0]);
			for (i = 0; i < n; ++i)
 434:	c0 17       	cp	r28, r16
 436:	d1 07       	cpc	r29, r17
 438:	a1 f7       	brne	.-24     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 43a:	10 c0       	rjmp	.+32     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 43c:	c8 e4       	ldi	r28, 0x48	; 72
 43e:	d1 e0       	ldi	r29, 0x01	; 1
 440:	02 ea       	ldi	r16, 0xA2	; 162
 442:	11 e0       	ldi	r17, 0x01	; 1
				play_note(STAR_MAN[i].freq, STAR_MAN[i].duration);
			break;
		default:
			n = sizeof(DA_FUNK)/ sizeof(DA_FUNK[0]);
			for (i = 0; i < n; ++i)
				play_note(DA_FUNK[i].freq, DA_FUNK[i].duration);
 444:	4a 81       	ldd	r20, Y+2	; 0x02
 446:	5b 81       	ldd	r21, Y+3	; 0x03
 448:	6c 81       	ldd	r22, Y+4	; 0x04
 44a:	7d 81       	ldd	r23, Y+5	; 0x05
 44c:	88 81       	ld	r24, Y
 44e:	99 81       	ldd	r25, Y+1	; 0x01
 450:	0e 94 68 01 	call	0x2d0	; 0x2d0 <play_note>
 454:	26 96       	adiw	r28, 0x06	; 6
			for (i = 0; i < n; ++i)
				play_note(STAR_MAN[i].freq, STAR_MAN[i].duration);
			break;
		default:
			n = sizeof(DA_FUNK)/ sizeof(DA_FUNK[0]);
			for (i = 0; i < n; ++i)
 456:	0c 17       	cp	r16, r28
 458:	1d 07       	cpc	r17, r29
 45a:	a1 f7       	brne	.-24     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				play_note(DA_FUNK[i].freq, DA_FUNK[i].duration);
			break;
	}
}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <print_song>:

void print_song(int key) {
	switch(key) {
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	91 05       	cpc	r25, r1
 46a:	19 f0       	breq	.+6      	; 0x472 <print_song+0xc>
 46c:	02 97       	sbiw	r24, 0x02	; 2
 46e:	91 f0       	breq	.+36     	; 0x494 <print_song+0x2e>
 470:	22 c0       	rjmp	.+68     	; 0x4b6 <print_song+0x50>
		case 1:
			lcd_pos(0,0);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
			lcd_puts2("Da Funk");
 47a:	80 e6       	ldi	r24, 0x60	; 96
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
			lcd_pos(1,0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
			lcd_puts2("by Daft Punk");
 48a:	88 e6       	ldi	r24, 0x68	; 104
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
			break;
 492:	08 95       	ret
		case 2:
			lcd_pos(0,0);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
			lcd_puts2("Star Theme");
 49c:	85 e7       	ldi	r24, 0x75	; 117
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
			lcd_pos(1,0);
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
			lcd_puts2("by Nintendo");
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
			break;
 4b4:	08 95       	ret
		default:
			lcd_pos(0,0);
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
			lcd_puts2("Da Funk");
 4be:	80 e6       	ldi	r24, 0x60	; 96
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
			lcd_pos(1,0);
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
			lcd_puts2("by Daft Punk");
 4ce:	88 e6       	ldi	r24, 0x68	; 104
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
 4d6:	08 95       	ret

000004d8 <main>:
	}
}

int main(void)
{
	DDRA = 0x01;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
 4dc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_init>
    while (1) 
    {
		lcd_pos(0,0);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
		lcd_puts2("Press a number");
 4e8:	8c e8       	ldi	r24, 0x8C	; 140
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
		lcd_pos(1,0);
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_pos>
		lcd_puts2("to choose a song");
 4f8:	8b e9       	ldi	r24, 0x9B	; 155
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_puts2>
		
		int key = get_key();
 500:	0e 94 41 01 	call	0x282	; 0x282 <get_key>
 504:	ec 01       	movw	r28, r24
		wait_avr(500);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	8a ef       	ldi	r24, 0xFA	; 250
 50c:	93 e4       	ldi	r25, 0x43	; 67
 50e:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_avr>
		if (key != 0) {
 512:	20 97       	sbiw	r28, 0x00	; 0
 514:	29 f3       	breq	.-54     	; 0x4e0 <main+0x8>
			while (1) {
				lcd_clr();
 516:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_clr>
				print_song(key);
 51a:	ce 01       	movw	r24, r28
 51c:	0e 94 33 02 	call	0x466	; 0x466 <print_song>
				play_song(key);
 520:	ce 01       	movw	r24, r28
 522:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <play_song>
 526:	f7 cf       	rjmp	.-18     	; 0x516 <main+0x3e>

00000528 <__subsf3>:
 528:	50 58       	subi	r21, 0x80	; 128

0000052a <__addsf3>:
 52a:	bb 27       	eor	r27, r27
 52c:	aa 27       	eor	r26, r26
 52e:	0e 94 ac 02 	call	0x558	; 0x558 <__addsf3x>
 532:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_round>
 536:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscA>
 53a:	38 f0       	brcs	.+14     	; 0x54a <__addsf3+0x20>
 53c:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscB>
 540:	20 f0       	brcs	.+8      	; 0x54a <__addsf3+0x20>
 542:	39 f4       	brne	.+14     	; 0x552 <__addsf3+0x28>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	19 f4       	brne	.+6      	; 0x54e <__addsf3+0x24>
 548:	26 f4       	brtc	.+8      	; 0x552 <__addsf3+0x28>
 54a:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_nan>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3+0x28>
 550:	e0 95       	com	r30
 552:	e7 fb       	bst	r30, 7
 554:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>

00000558 <__addsf3x>:
 558:	e9 2f       	mov	r30, r25
 55a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_split3>
 55e:	58 f3       	brcs	.-42     	; 0x536 <__addsf3+0xc>
 560:	ba 17       	cp	r27, r26
 562:	62 07       	cpc	r22, r18
 564:	73 07       	cpc	r23, r19
 566:	84 07       	cpc	r24, r20
 568:	95 07       	cpc	r25, r21
 56a:	20 f0       	brcs	.+8      	; 0x574 <__addsf3x+0x1c>
 56c:	79 f4       	brne	.+30     	; 0x58c <__addsf3x+0x34>
 56e:	a6 f5       	brtc	.+104    	; 0x5d8 <__addsf3x+0x80>
 570:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_zero>
 574:	0e f4       	brtc	.+2      	; 0x578 <__addsf3x+0x20>
 576:	e0 95       	com	r30
 578:	0b 2e       	mov	r0, r27
 57a:	ba 2f       	mov	r27, r26
 57c:	a0 2d       	mov	r26, r0
 57e:	0b 01       	movw	r0, r22
 580:	b9 01       	movw	r22, r18
 582:	90 01       	movw	r18, r0
 584:	0c 01       	movw	r0, r24
 586:	ca 01       	movw	r24, r20
 588:	a0 01       	movw	r20, r0
 58a:	11 24       	eor	r1, r1
 58c:	ff 27       	eor	r31, r31
 58e:	59 1b       	sub	r21, r25
 590:	99 f0       	breq	.+38     	; 0x5b8 <__addsf3x+0x60>
 592:	59 3f       	cpi	r21, 0xF9	; 249
 594:	50 f4       	brcc	.+20     	; 0x5aa <__addsf3x+0x52>
 596:	50 3e       	cpi	r21, 0xE0	; 224
 598:	68 f1       	brcs	.+90     	; 0x5f4 <__addsf3x+0x9c>
 59a:	1a 16       	cp	r1, r26
 59c:	f0 40       	sbci	r31, 0x00	; 0
 59e:	a2 2f       	mov	r26, r18
 5a0:	23 2f       	mov	r18, r19
 5a2:	34 2f       	mov	r19, r20
 5a4:	44 27       	eor	r20, r20
 5a6:	58 5f       	subi	r21, 0xF8	; 248
 5a8:	f3 cf       	rjmp	.-26     	; 0x590 <__addsf3x+0x38>
 5aa:	46 95       	lsr	r20
 5ac:	37 95       	ror	r19
 5ae:	27 95       	ror	r18
 5b0:	a7 95       	ror	r26
 5b2:	f0 40       	sbci	r31, 0x00	; 0
 5b4:	53 95       	inc	r21
 5b6:	c9 f7       	brne	.-14     	; 0x5aa <__addsf3x+0x52>
 5b8:	7e f4       	brtc	.+30     	; 0x5d8 <__addsf3x+0x80>
 5ba:	1f 16       	cp	r1, r31
 5bc:	ba 0b       	sbc	r27, r26
 5be:	62 0b       	sbc	r22, r18
 5c0:	73 0b       	sbc	r23, r19
 5c2:	84 0b       	sbc	r24, r20
 5c4:	ba f0       	brmi	.+46     	; 0x5f4 <__addsf3x+0x9c>
 5c6:	91 50       	subi	r25, 0x01	; 1
 5c8:	a1 f0       	breq	.+40     	; 0x5f2 <__addsf3x+0x9a>
 5ca:	ff 0f       	add	r31, r31
 5cc:	bb 1f       	adc	r27, r27
 5ce:	66 1f       	adc	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	88 1f       	adc	r24, r24
 5d4:	c2 f7       	brpl	.-16     	; 0x5c6 <__addsf3x+0x6e>
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <__addsf3x+0x9c>
 5d8:	ba 0f       	add	r27, r26
 5da:	62 1f       	adc	r22, r18
 5dc:	73 1f       	adc	r23, r19
 5de:	84 1f       	adc	r24, r20
 5e0:	48 f4       	brcc	.+18     	; 0x5f4 <__addsf3x+0x9c>
 5e2:	87 95       	ror	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b7 95       	ror	r27
 5ea:	f7 95       	ror	r31
 5ec:	9e 3f       	cpi	r25, 0xFE	; 254
 5ee:	08 f0       	brcs	.+2      	; 0x5f2 <__addsf3x+0x9a>
 5f0:	b0 cf       	rjmp	.-160    	; 0x552 <__addsf3+0x28>
 5f2:	93 95       	inc	r25
 5f4:	88 0f       	add	r24, r24
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <__addsf3x+0xa2>
 5f8:	99 27       	eor	r25, r25
 5fa:	ee 0f       	add	r30, r30
 5fc:	97 95       	ror	r25
 5fe:	87 95       	ror	r24
 600:	08 95       	ret

00000602 <__divsf3>:
 602:	0e 94 15 03 	call	0x62a	; 0x62a <__divsf3x>
 606:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_round>
 60a:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscB>
 60e:	58 f0       	brcs	.+22     	; 0x626 <__divsf3+0x24>
 610:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscA>
 614:	40 f0       	brcs	.+16     	; 0x626 <__divsf3+0x24>
 616:	29 f4       	brne	.+10     	; 0x622 <__divsf3+0x20>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	29 f0       	breq	.+10     	; 0x626 <__divsf3+0x24>
 61c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 620:	51 11       	cpse	r21, r1
 622:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>
 626:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_nan>

0000062a <__divsf3x>:
 62a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_split3>
 62e:	68 f3       	brcs	.-38     	; 0x60a <__divsf3+0x8>

00000630 <__divsf3_pse>:
 630:	99 23       	and	r25, r25
 632:	b1 f3       	breq	.-20     	; 0x620 <__divsf3+0x1e>
 634:	55 23       	and	r21, r21
 636:	91 f3       	breq	.-28     	; 0x61c <__divsf3+0x1a>
 638:	95 1b       	sub	r25, r21
 63a:	55 0b       	sbc	r21, r21
 63c:	bb 27       	eor	r27, r27
 63e:	aa 27       	eor	r26, r26
 640:	62 17       	cp	r22, r18
 642:	73 07       	cpc	r23, r19
 644:	84 07       	cpc	r24, r20
 646:	38 f0       	brcs	.+14     	; 0x656 <__divsf3_pse+0x26>
 648:	9f 5f       	subi	r25, 0xFF	; 255
 64a:	5f 4f       	sbci	r21, 0xFF	; 255
 64c:	22 0f       	add	r18, r18
 64e:	33 1f       	adc	r19, r19
 650:	44 1f       	adc	r20, r20
 652:	aa 1f       	adc	r26, r26
 654:	a9 f3       	breq	.-22     	; 0x640 <__divsf3_pse+0x10>
 656:	35 d0       	rcall	.+106    	; 0x6c2 <__divsf3_pse+0x92>
 658:	0e 2e       	mov	r0, r30
 65a:	3a f0       	brmi	.+14     	; 0x66a <__divsf3_pse+0x3a>
 65c:	e0 e8       	ldi	r30, 0x80	; 128
 65e:	32 d0       	rcall	.+100    	; 0x6c4 <__divsf3_pse+0x94>
 660:	91 50       	subi	r25, 0x01	; 1
 662:	50 40       	sbci	r21, 0x00	; 0
 664:	e6 95       	lsr	r30
 666:	00 1c       	adc	r0, r0
 668:	ca f7       	brpl	.-14     	; 0x65c <__divsf3_pse+0x2c>
 66a:	2b d0       	rcall	.+86     	; 0x6c2 <__divsf3_pse+0x92>
 66c:	fe 2f       	mov	r31, r30
 66e:	29 d0       	rcall	.+82     	; 0x6c2 <__divsf3_pse+0x92>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	bb 1f       	adc	r27, r27
 678:	26 17       	cp	r18, r22
 67a:	37 07       	cpc	r19, r23
 67c:	48 07       	cpc	r20, r24
 67e:	ab 07       	cpc	r26, r27
 680:	b0 e8       	ldi	r27, 0x80	; 128
 682:	09 f0       	breq	.+2      	; 0x686 <__divsf3_pse+0x56>
 684:	bb 0b       	sbc	r27, r27
 686:	80 2d       	mov	r24, r0
 688:	bf 01       	movw	r22, r30
 68a:	ff 27       	eor	r31, r31
 68c:	93 58       	subi	r25, 0x83	; 131
 68e:	5f 4f       	sbci	r21, 0xFF	; 255
 690:	3a f0       	brmi	.+14     	; 0x6a0 <__divsf3_pse+0x70>
 692:	9e 3f       	cpi	r25, 0xFE	; 254
 694:	51 05       	cpc	r21, r1
 696:	78 f0       	brcs	.+30     	; 0x6b6 <__divsf3_pse+0x86>
 698:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 69c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	e4 f3       	brlt	.-8      	; 0x69c <__divsf3_pse+0x6c>
 6a4:	98 3e       	cpi	r25, 0xE8	; 232
 6a6:	d4 f3       	brlt	.-12     	; 0x69c <__divsf3_pse+0x6c>
 6a8:	86 95       	lsr	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	b7 95       	ror	r27
 6b0:	f7 95       	ror	r31
 6b2:	9f 5f       	subi	r25, 0xFF	; 255
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__divsf3_pse+0x78>
 6b6:	88 0f       	add	r24, r24
 6b8:	91 1d       	adc	r25, r1
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret
 6c2:	e1 e0       	ldi	r30, 0x01	; 1
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	bb 1f       	adc	r27, r27
 6cc:	62 17       	cp	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	ba 07       	cpc	r27, r26
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__divsf3_pse+0xae>
 6d6:	62 1b       	sub	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	ba 0b       	sbc	r27, r26
 6de:	ee 1f       	adc	r30, r30
 6e0:	88 f7       	brcc	.-30     	; 0x6c4 <__divsf3_pse+0x94>
 6e2:	e0 95       	com	r30
 6e4:	08 95       	ret

000006e6 <__floatunsisf>:
 6e6:	e8 94       	clt
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <__floatsisf+0x12>

000006ea <__floatsisf>:
 6ea:	97 fb       	bst	r25, 7
 6ec:	3e f4       	brtc	.+14     	; 0x6fc <__floatsisf+0x12>
 6ee:	90 95       	com	r25
 6f0:	80 95       	com	r24
 6f2:	70 95       	com	r23
 6f4:	61 95       	neg	r22
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	8f 4f       	sbci	r24, 0xFF	; 255
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	99 23       	and	r25, r25
 6fe:	a9 f0       	breq	.+42     	; 0x72a <__floatsisf+0x40>
 700:	f9 2f       	mov	r31, r25
 702:	96 e9       	ldi	r25, 0x96	; 150
 704:	bb 27       	eor	r27, r27
 706:	93 95       	inc	r25
 708:	f6 95       	lsr	r31
 70a:	87 95       	ror	r24
 70c:	77 95       	ror	r23
 70e:	67 95       	ror	r22
 710:	b7 95       	ror	r27
 712:	f1 11       	cpse	r31, r1
 714:	f8 cf       	rjmp	.-16     	; 0x706 <__floatsisf+0x1c>
 716:	fa f4       	brpl	.+62     	; 0x756 <__floatsisf+0x6c>
 718:	bb 0f       	add	r27, r27
 71a:	11 f4       	brne	.+4      	; 0x720 <__floatsisf+0x36>
 71c:	60 ff       	sbrs	r22, 0
 71e:	1b c0       	rjmp	.+54     	; 0x756 <__floatsisf+0x6c>
 720:	6f 5f       	subi	r22, 0xFF	; 255
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	16 c0       	rjmp	.+44     	; 0x756 <__floatsisf+0x6c>
 72a:	88 23       	and	r24, r24
 72c:	11 f0       	breq	.+4      	; 0x732 <__floatsisf+0x48>
 72e:	96 e9       	ldi	r25, 0x96	; 150
 730:	11 c0       	rjmp	.+34     	; 0x754 <__floatsisf+0x6a>
 732:	77 23       	and	r23, r23
 734:	21 f0       	breq	.+8      	; 0x73e <__floatsisf+0x54>
 736:	9e e8       	ldi	r25, 0x8E	; 142
 738:	87 2f       	mov	r24, r23
 73a:	76 2f       	mov	r23, r22
 73c:	05 c0       	rjmp	.+10     	; 0x748 <__floatsisf+0x5e>
 73e:	66 23       	and	r22, r22
 740:	71 f0       	breq	.+28     	; 0x75e <__floatsisf+0x74>
 742:	96 e8       	ldi	r25, 0x86	; 134
 744:	86 2f       	mov	r24, r22
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	2a f0       	brmi	.+10     	; 0x756 <__floatsisf+0x6c>
 74c:	9a 95       	dec	r25
 74e:	66 0f       	add	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	da f7       	brpl	.-10     	; 0x74c <__floatsisf+0x62>
 756:	88 0f       	add	r24, r24
 758:	96 95       	lsr	r25
 75a:	87 95       	ror	r24
 75c:	97 f9       	bld	r25, 7
 75e:	08 95       	ret

00000760 <__fp_inf>:
 760:	97 f9       	bld	r25, 7
 762:	9f 67       	ori	r25, 0x7F	; 127
 764:	80 e8       	ldi	r24, 0x80	; 128
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	08 95       	ret

0000076c <__fp_nan>:
 76c:	9f ef       	ldi	r25, 0xFF	; 255
 76e:	80 ec       	ldi	r24, 0xC0	; 192
 770:	08 95       	ret

00000772 <__fp_pscA>:
 772:	00 24       	eor	r0, r0
 774:	0a 94       	dec	r0
 776:	16 16       	cp	r1, r22
 778:	17 06       	cpc	r1, r23
 77a:	18 06       	cpc	r1, r24
 77c:	09 06       	cpc	r0, r25
 77e:	08 95       	ret

00000780 <__fp_pscB>:
 780:	00 24       	eor	r0, r0
 782:	0a 94       	dec	r0
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	14 06       	cpc	r1, r20
 78a:	05 06       	cpc	r0, r21
 78c:	08 95       	ret

0000078e <__fp_round>:
 78e:	09 2e       	mov	r0, r25
 790:	03 94       	inc	r0
 792:	00 0c       	add	r0, r0
 794:	11 f4       	brne	.+4      	; 0x79a <__fp_round+0xc>
 796:	88 23       	and	r24, r24
 798:	52 f0       	brmi	.+20     	; 0x7ae <__fp_round+0x20>
 79a:	bb 0f       	add	r27, r27
 79c:	40 f4       	brcc	.+16     	; 0x7ae <__fp_round+0x20>
 79e:	bf 2b       	or	r27, r31
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <__fp_round+0x18>
 7a2:	60 ff       	sbrs	r22, 0
 7a4:	04 c0       	rjmp	.+8      	; 0x7ae <__fp_round+0x20>
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	8f 4f       	sbci	r24, 0xFF	; 255
 7ac:	9f 4f       	sbci	r25, 0xFF	; 255
 7ae:	08 95       	ret

000007b0 <__fp_split3>:
 7b0:	57 fd       	sbrc	r21, 7
 7b2:	90 58       	subi	r25, 0x80	; 128
 7b4:	44 0f       	add	r20, r20
 7b6:	55 1f       	adc	r21, r21
 7b8:	59 f0       	breq	.+22     	; 0x7d0 <__fp_splitA+0x10>
 7ba:	5f 3f       	cpi	r21, 0xFF	; 255
 7bc:	71 f0       	breq	.+28     	; 0x7da <__fp_splitA+0x1a>
 7be:	47 95       	ror	r20

000007c0 <__fp_splitA>:
 7c0:	88 0f       	add	r24, r24
 7c2:	97 fb       	bst	r25, 7
 7c4:	99 1f       	adc	r25, r25
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <__fp_splitA+0x20>
 7c8:	9f 3f       	cpi	r25, 0xFF	; 255
 7ca:	79 f0       	breq	.+30     	; 0x7ea <__fp_splitA+0x2a>
 7cc:	87 95       	ror	r24
 7ce:	08 95       	ret
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	14 06       	cpc	r1, r20
 7d6:	55 1f       	adc	r21, r21
 7d8:	f2 cf       	rjmp	.-28     	; 0x7be <__fp_split3+0xe>
 7da:	46 95       	lsr	r20
 7dc:	f1 df       	rcall	.-30     	; 0x7c0 <__fp_splitA>
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <__fp_splitA+0x30>
 7e0:	16 16       	cp	r1, r22
 7e2:	17 06       	cpc	r1, r23
 7e4:	18 06       	cpc	r1, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	f1 cf       	rjmp	.-30     	; 0x7cc <__fp_splitA+0xc>
 7ea:	86 95       	lsr	r24
 7ec:	71 05       	cpc	r23, r1
 7ee:	61 05       	cpc	r22, r1
 7f0:	08 94       	sec
 7f2:	08 95       	ret

000007f4 <__fp_zero>:
 7f4:	e8 94       	clt

000007f6 <__fp_szero>:
 7f6:	bb 27       	eor	r27, r27
 7f8:	66 27       	eor	r22, r22
 7fa:	77 27       	eor	r23, r23
 7fc:	cb 01       	movw	r24, r22
 7fe:	97 f9       	bld	r25, 7
 800:	08 95       	ret

00000802 <__gesf2>:
 802:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_cmp>
 806:	08 f4       	brcc	.+2      	; 0x80a <__gesf2+0x8>
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__mulsf3>:
 80c:	0e 94 19 04 	call	0x832	; 0x832 <__mulsf3x>
 810:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_round>
 814:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscA>
 818:	38 f0       	brcs	.+14     	; 0x828 <__mulsf3+0x1c>
 81a:	0e 94 c0 03 	call	0x780	; 0x780 <__fp_pscB>
 81e:	20 f0       	brcs	.+8      	; 0x828 <__mulsf3+0x1c>
 820:	95 23       	and	r25, r21
 822:	11 f0       	breq	.+4      	; 0x828 <__mulsf3+0x1c>
 824:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 828:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__fp_nan>
 82c:	11 24       	eor	r1, r1
 82e:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>

00000832 <__mulsf3x>:
 832:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_split3>
 836:	70 f3       	brcs	.-36     	; 0x814 <__mulsf3+0x8>

00000838 <__mulsf3_pse>:
 838:	95 9f       	mul	r25, r21
 83a:	c1 f3       	breq	.-16     	; 0x82c <__mulsf3+0x20>
 83c:	95 0f       	add	r25, r21
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	55 1f       	adc	r21, r21
 842:	62 9f       	mul	r22, r18
 844:	f0 01       	movw	r30, r0
 846:	72 9f       	mul	r23, r18
 848:	bb 27       	eor	r27, r27
 84a:	f0 0d       	add	r31, r0
 84c:	b1 1d       	adc	r27, r1
 84e:	63 9f       	mul	r22, r19
 850:	aa 27       	eor	r26, r26
 852:	f0 0d       	add	r31, r0
 854:	b1 1d       	adc	r27, r1
 856:	aa 1f       	adc	r26, r26
 858:	64 9f       	mul	r22, r20
 85a:	66 27       	eor	r22, r22
 85c:	b0 0d       	add	r27, r0
 85e:	a1 1d       	adc	r26, r1
 860:	66 1f       	adc	r22, r22
 862:	82 9f       	mul	r24, r18
 864:	22 27       	eor	r18, r18
 866:	b0 0d       	add	r27, r0
 868:	a1 1d       	adc	r26, r1
 86a:	62 1f       	adc	r22, r18
 86c:	73 9f       	mul	r23, r19
 86e:	b0 0d       	add	r27, r0
 870:	a1 1d       	adc	r26, r1
 872:	62 1f       	adc	r22, r18
 874:	83 9f       	mul	r24, r19
 876:	a0 0d       	add	r26, r0
 878:	61 1d       	adc	r22, r1
 87a:	22 1f       	adc	r18, r18
 87c:	74 9f       	mul	r23, r20
 87e:	33 27       	eor	r19, r19
 880:	a0 0d       	add	r26, r0
 882:	61 1d       	adc	r22, r1
 884:	23 1f       	adc	r18, r19
 886:	84 9f       	mul	r24, r20
 888:	60 0d       	add	r22, r0
 88a:	21 1d       	adc	r18, r1
 88c:	82 2f       	mov	r24, r18
 88e:	76 2f       	mov	r23, r22
 890:	6a 2f       	mov	r22, r26
 892:	11 24       	eor	r1, r1
 894:	9f 57       	subi	r25, 0x7F	; 127
 896:	50 40       	sbci	r21, 0x00	; 0
 898:	9a f0       	brmi	.+38     	; 0x8c0 <__stack+0x61>
 89a:	f1 f0       	breq	.+60     	; 0x8d8 <__stack+0x79>
 89c:	88 23       	and	r24, r24
 89e:	4a f0       	brmi	.+18     	; 0x8b2 <__stack+0x53>
 8a0:	ee 0f       	add	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	bb 1f       	adc	r27, r27
 8a6:	66 1f       	adc	r22, r22
 8a8:	77 1f       	adc	r23, r23
 8aa:	88 1f       	adc	r24, r24
 8ac:	91 50       	subi	r25, 0x01	; 1
 8ae:	50 40       	sbci	r21, 0x00	; 0
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__stack+0x3d>
 8b2:	9e 3f       	cpi	r25, 0xFE	; 254
 8b4:	51 05       	cpc	r21, r1
 8b6:	80 f0       	brcs	.+32     	; 0x8d8 <__stack+0x79>
 8b8:	0c 94 b0 03 	jmp	0x760	; 0x760 <__fp_inf>
 8bc:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__fp_szero>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	e4 f3       	brlt	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	98 3e       	cpi	r25, 0xE8	; 232
 8c6:	d4 f3       	brlt	.-12     	; 0x8bc <__stack+0x5d>
 8c8:	86 95       	lsr	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b7 95       	ror	r27
 8d0:	f7 95       	ror	r31
 8d2:	e7 95       	ror	r30
 8d4:	9f 5f       	subi	r25, 0xFF	; 255
 8d6:	c1 f7       	brne	.-16     	; 0x8c8 <__stack+0x69>
 8d8:	fe 2b       	or	r31, r30
 8da:	88 0f       	add	r24, r24
 8dc:	91 1d       	adc	r25, r1
 8de:	96 95       	lsr	r25
 8e0:	87 95       	ror	r24
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <__fp_cmp>:
 8e6:	99 0f       	add	r25, r25
 8e8:	00 08       	sbc	r0, r0
 8ea:	55 0f       	add	r21, r21
 8ec:	aa 0b       	sbc	r26, r26
 8ee:	e0 e8       	ldi	r30, 0x80	; 128
 8f0:	fe ef       	ldi	r31, 0xFE	; 254
 8f2:	16 16       	cp	r1, r22
 8f4:	17 06       	cpc	r1, r23
 8f6:	e8 07       	cpc	r30, r24
 8f8:	f9 07       	cpc	r31, r25
 8fa:	c0 f0       	brcs	.+48     	; 0x92c <__fp_cmp+0x46>
 8fc:	12 16       	cp	r1, r18
 8fe:	13 06       	cpc	r1, r19
 900:	e4 07       	cpc	r30, r20
 902:	f5 07       	cpc	r31, r21
 904:	98 f0       	brcs	.+38     	; 0x92c <__fp_cmp+0x46>
 906:	62 1b       	sub	r22, r18
 908:	73 0b       	sbc	r23, r19
 90a:	84 0b       	sbc	r24, r20
 90c:	95 0b       	sbc	r25, r21
 90e:	39 f4       	brne	.+14     	; 0x91e <__fp_cmp+0x38>
 910:	0a 26       	eor	r0, r26
 912:	61 f0       	breq	.+24     	; 0x92c <__fp_cmp+0x46>
 914:	23 2b       	or	r18, r19
 916:	24 2b       	or	r18, r20
 918:	25 2b       	or	r18, r21
 91a:	21 f4       	brne	.+8      	; 0x924 <__fp_cmp+0x3e>
 91c:	08 95       	ret
 91e:	0a 26       	eor	r0, r26
 920:	09 f4       	brne	.+2      	; 0x924 <__fp_cmp+0x3e>
 922:	a1 40       	sbci	r26, 0x01	; 1
 924:	a6 95       	lsr	r26
 926:	8f ef       	ldi	r24, 0xFF	; 255
 928:	81 1d       	adc	r24, r1
 92a:	81 1d       	adc	r24, r1
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
