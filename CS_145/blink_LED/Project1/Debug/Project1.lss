
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000607  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000133d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <wait_avr>:
	volatile int i,n = 17000;
	
	for (i = 0; i < n; ++i) {
		//blah
	}
}
  6c:	9c 01       	movw	r18, r24
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	83 bf       	out	0x33, r24	; 51
  72:	83 e8       	ldi	r24, 0x83	; 131
  74:	07 c0       	rjmp	.+14     	; 0x84 <wait_avr+0x18>
  76:	82 bf       	out	0x32, r24	; 50
  78:	98 b7       	in	r25, 0x38	; 56
  7a:	91 60       	ori	r25, 0x01	; 1
  7c:	98 bf       	out	0x38, r25	; 56
  7e:	08 b6       	in	r0, 0x38	; 56
  80:	00 fe       	sbrs	r0, 0
  82:	fd cf       	rjmp	.-6      	; 0x7e <wait_avr+0x12>
  84:	21 50       	subi	r18, 0x01	; 1
  86:	31 09       	sbc	r19, r1
  88:	b0 f7       	brcc	.-20     	; 0x76 <wait_avr+0xa>
  8a:	13 be       	out	0x33, r1	; 51
  8c:	08 95       	ret

0000008e <main>:
{
    /* Replace with your application code */
	
	/*
	*/
	DDRB = 1;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		if (GET_BIT(PINB, 1) == 0) {
			PORTB = 1;
  92:	c1 e0       	ldi	r28, 0x01	; 1
	/*
	*/
	DDRB = 1;
    while (1) 
    {
		if (GET_BIT(PINB, 1) == 0) {
  94:	b1 99       	sbic	0x16, 1	; 22
  96:	0b c0       	rjmp	.+22     	; 0xae <main+0x20>
			PORTB = 1;
  98:	c8 bb       	out	0x18, r28	; 24
			//wait_half();
			wait_avr(500);
  9a:	84 ef       	ldi	r24, 0xF4	; 244
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
			PORTB = 0;
  a2:	18 ba       	out	0x18, r1	; 24
			//wait_half();
			wait_avr(500);
  a4:	84 ef       	ldi	r24, 0xF4	; 244
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <wait_avr>
  ac:	f3 cf       	rjmp	.-26     	; 0x94 <main+0x6>
		}
		else {
			PORTB = 0;
  ae:	18 ba       	out	0x18, r1	; 24
  b0:	f1 cf       	rjmp	.-30     	; 0x94 <main+0x6>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
