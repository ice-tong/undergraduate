
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c0a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000c0a  00000c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dc9  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076b  00000000  00000000  00001bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f0  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d5  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	18 02       	muls	r17, r24
  56:	38 02       	muls	r19, r24
  58:	ac 02       	muls	r26, r28
  5a:	ac 02       	muls	r26, r28
  5c:	55 02       	muls	r21, r21
  5e:	63 02       	muls	r22, r19
  60:	ac 02       	muls	r26, r28
  62:	ac 02       	muls	r26, r28
  64:	6d 02       	muls	r22, r29
  66:	75 02       	muls	r23, r21
  68:	ac 02       	muls	r26, r28
  6a:	ac 02       	muls	r26, r28
  6c:	7f 02       	muls	r23, r31
  6e:	8c 02       	muls	r24, r28
  70:	96 02       	muls	r25, r22
  72:	a3 02       	muls	r26, r19

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ea e0       	ldi	r30, 0x0A	; 10
  88:	fc e0       	ldi	r31, 0x0C	; 12
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a6 3a       	cpi	r26, 0xA6	; 166
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  9a:	0c 94 03 06 	jmp	0xc06	; 0xc06 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
  a2:	66 23       	and	r22, r22
  a4:	11 f0       	breq	.+4      	; 0xaa <output+0x8>
  a6:	c0 9a       	sbi	0x18, 0	; 24
  a8:	01 c0       	rjmp	.+2      	; 0xac <output+0xa>
  aa:	c0 98       	cbi	0x18, 0	; 24
  ac:	c1 98       	cbi	0x18, 1	; 24
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	81 bb       	out	0x11, r24	; 17
  b4:	c2 9a       	sbi	0x18, 2	; 24
  b6:	00 00       	nop
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	c2 98       	cbi	0x18, 2	; 24
  be:	08 95       	ret

000000c0 <write>:
  c0:	c0 98       	cbi	0x18, 0	; 24
  c2:	c1 9a       	sbi	0x18, 1	; 24
  c4:	11 ba       	out	0x11, r1	; 17
  c6:	90 b3       	in	r25, 0x10	; 16
  c8:	c2 9a       	sbi	0x18, 2	; 24
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	00 00       	nop
  d0:	11 ba       	out	0x11, r1	; 17
  d2:	90 b3       	in	r25, 0x10	; 16
  d4:	c2 98       	cbi	0x18, 2	; 24
  d6:	99 23       	and	r25, r25
  d8:	9c f3       	brlt	.-26     	; 0xc0 <write>
  da:	0e 94 51 00 	call	0xa2	; 0xa2 <output>
  de:	08 95       	ret

000000e0 <avr_wait>:
  e0:	9c 01       	movw	r18, r24
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	83 bf       	out	0x33, r24	; 51
  e6:	83 e8       	ldi	r24, 0x83	; 131
  e8:	08 c0       	rjmp	.+16     	; 0xfa <avr_wait+0x1a>
  ea:	82 bf       	out	0x32, r24	; 50
  ec:	98 b7       	in	r25, 0x38	; 56
  ee:	91 60       	ori	r25, 0x01	; 1
  f0:	98 bf       	out	0x38, r25	; 56
  f2:	a8 95       	wdr
  f4:	08 b6       	in	r0, 0x38	; 56
  f6:	00 fe       	sbrs	r0, 0
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <avr_wait+0x14>
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	31 09       	sbc	r19, r1
  fe:	a8 f7       	brcc	.-22     	; 0xea <avr_wait+0xa>
 100:	13 be       	out	0x33, r1	; 51
 102:	08 95       	ret

00000104 <lcd_init>:
 104:	b8 9a       	sbi	0x17, 0	; 23
 106:	b9 9a       	sbi	0x17, 1	; 23
 108:	ba 9a       	sbi	0x17, 2	; 23
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	0e 94 51 00 	call	0xa2	; 0xa2 <output>
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	0e 94 51 00 	call	0xa2	; 0xa2 <output>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	8c e3       	ldi	r24, 0x3C	; 60
 136:	0e 94 60 00 	call	0xc0	; 0xc0 <write>
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 60 00 	call	0xc0	; 0xc0 <write>
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	0e 94 60 00 	call	0xc0	; 0xc0 <write>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 60 00 	call	0xc0	; 0xc0 <write>
 152:	08 95       	ret

00000154 <lcd_pos>:
 154:	cf 93       	push	r28
 156:	c6 2f       	mov	r28, r22
 158:	98 e2       	ldi	r25, 0x28	; 40
 15a:	89 9f       	mul	r24, r25
 15c:	c0 0d       	add	r28, r0
 15e:	11 24       	eor	r1, r1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 60 00 	call	0xc0	; 0xc0 <write>
 168:	cc 23       	and	r28, r28
 16a:	31 f0       	breq	.+12     	; 0x178 <lcd_pos+0x24>
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	84 e1       	ldi	r24, 0x14	; 20
 170:	0e 94 60 00 	call	0xc0	; 0xc0 <write>
 174:	c1 50       	subi	r28, 0x01	; 1
 176:	d1 f7       	brne	.-12     	; 0x16c <lcd_pos+0x18>
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <lcd_puts2>:

void
lcd_puts2(const char *s)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
 180:	ec 01       	movw	r28, r24
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	88 23       	and	r24, r24
 18a:	31 f0       	breq	.+12     	; 0x198 <lcd_puts2+0x1c>
		write(c, 1);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	0e 94 60 00 	call	0xc0	; 0xc0 <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
 192:	89 91       	ld	r24, Y+
 194:	81 11       	cpse	r24, r1
 196:	fa cf       	rjmp	.-12     	; 0x18c <lcd_puts2+0x10>
		write(c, 1);
	}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <pressed>:

const int days_array[12] =  {JANUARY, FEBRUARY, MARCH, APRIL,
							MAY, JUNE, JULY, AUGUST, SEPTEMBER,
							OCTOBER, NOVEMBER, DECEMBER};

int pressed(int r, int c) {
 19e:	ef 92       	push	r14
 1a0:	ff 92       	push	r15
 1a2:	0f 93       	push	r16
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	8c 01       	movw	r16, r24
 1ac:	f6 2e       	mov	r15, r22
	PORTC = 0;
 1ae:	15 ba       	out	0x15, r1	; 21
	avr_wait(1);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
	DDRC = 0;
 1b8:	14 ba       	out	0x14, r1	; 20
	avr_wait(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
	
	SET_BIT(DDRC, c);
 1c2:	84 b3       	in	r24, 0x14	; 20
 1c4:	c1 e0       	ldi	r28, 0x01	; 1
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	9e 01       	movw	r18, r28
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <pressed+0x32>
 1cc:	22 0f       	add	r18, r18
 1ce:	33 1f       	adc	r19, r19
 1d0:	fa 94       	dec	r15
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <pressed+0x2e>
 1d4:	79 01       	movw	r14, r18
 1d6:	82 2b       	or	r24, r18
 1d8:	84 bb       	out	0x14, r24	; 20
	avr_wait(1);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
	CLR_BIT(PORTC, c);
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	e0 94       	com	r14
 1e6:	e8 22       	and	r14, r24
 1e8:	e5 ba       	out	0x15, r14	; 21
	avr_wait(1);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
	
	SET_BIT(PORTC, r+4);
 1f2:	85 b3       	in	r24, 0x15	; 21
 1f4:	0c 5f       	subi	r16, 0xFC	; 252
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	00 2e       	mov	r0, r16
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <pressed+0x62>
 1fc:	cc 0f       	add	r28, r28
 1fe:	dd 1f       	adc	r29, r29
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <pressed+0x5e>
 204:	c8 2b       	or	r28, r24
 206:	c5 bb       	out	0x15, r28	; 21
	avr_wait(1);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
	if (GET_BIT(PINC, r+4))
 210:	23 b3       	in	r18, 0x13	; 19
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <pressed+0x7c>
 216:	35 95       	asr	r19
 218:	27 95       	ror	r18
 21a:	0a 95       	dec	r16
 21c:	e2 f7       	brpl	.-8      	; 0x216 <pressed+0x78>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	20 ff       	sbrs	r18, 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <pressed+0x8c>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
		return 0;

	return 1;
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	08 95       	ret

00000238 <get_key>:

int get_key() {
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	int r, c;
	for (r = 0; r < 4; ++r) {
 240:	00 e0       	ldi	r16, 0x00	; 0
 242:	10 e0       	ldi	r17, 0x00	; 0
 244:	18 c0       	rjmp	.+48     	; 0x276 <get_key+0x3e>
		for (c = 0; c < 4; ++c) {
			if (pressed(c,r))
 246:	b8 01       	movw	r22, r16
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 cf 00 	call	0x19e	; 0x19e <pressed>
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	49 f0       	breq	.+18     	; 0x264 <get_key+0x2c>
				return 1 + (r*4) + c;
 252:	c8 01       	movw	r24, r16
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	8c 0f       	add	r24, r28
 260:	9d 1f       	adc	r25, r29
 262:	0c c0       	rjmp	.+24     	; 0x27c <get_key+0x44>
}

int get_key() {
	int r, c;
	for (r = 0; r < 4; ++r) {
		for (c = 0; c < 4; ++c) {
 264:	21 96       	adiw	r28, 0x01	; 1
 266:	c4 30       	cpi	r28, 0x04	; 4
 268:	d1 05       	cpc	r29, r1
 26a:	69 f7       	brne	.-38     	; 0x246 <get_key+0xe>
	return 1;
}

int get_key() {
	int r, c;
	for (r = 0; r < 4; ++r) {
 26c:	0f 5f       	subi	r16, 0xFF	; 255
 26e:	1f 4f       	sbci	r17, 0xFF	; 255
 270:	04 30       	cpi	r16, 0x04	; 4
 272:	11 05       	cpc	r17, r1
 274:	19 f0       	breq	.+6      	; 0x27c <get_key+0x44>
		return 0;

	return 1;
}

int get_key() {
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
 27a:	e5 cf       	rjmp	.-54     	; 0x246 <get_key+0xe>
			if (pressed(c,r))
				return 1 + (r*4) + c;
		}
	}
	return 0;
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	0f 91       	pop	r16
 284:	08 95       	ret

00000286 <keep_time>:
	int subsecond;
	
	int days_in_month;
};
	
void keep_time(struct datetime * dt) {
 286:	fc 01       	movw	r30, r24
	dt->subsecond++;
 288:	24 85       	ldd	r18, Z+12	; 0x0c
 28a:	35 85       	ldd	r19, Z+13	; 0x0d
 28c:	2f 5f       	subi	r18, 0xFF	; 255
 28e:	3f 4f       	sbci	r19, 0xFF	; 255
	if (10 == dt->subsecond) {
 290:	2a 30       	cpi	r18, 0x0A	; 10
 292:	31 05       	cpc	r19, r1
 294:	19 f0       	breq	.+6      	; 0x29c <keep_time+0x16>
	
	int days_in_month;
};
	
void keep_time(struct datetime * dt) {
	dt->subsecond++;
 296:	35 87       	std	Z+13, r19	; 0x0d
 298:	24 87       	std	Z+12, r18	; 0x0c
 29a:	08 95       	ret
	if (10 == dt->subsecond) {
		dt->subsecond = 0;
 29c:	15 86       	std	Z+13, r1	; 0x0d
 29e:	14 86       	std	Z+12, r1	; 0x0c
		dt->second++;
 2a0:	82 85       	ldd	r24, Z+10	; 0x0a
 2a2:	93 85       	ldd	r25, Z+11	; 0x0b
 2a4:	01 96       	adiw	r24, 0x01	; 1
		if (60 == dt->second) {
 2a6:	8c 33       	cpi	r24, 0x3C	; 60
 2a8:	91 05       	cpc	r25, r1
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <keep_time+0x2c>
	
void keep_time(struct datetime * dt) {
	dt->subsecond++;
	if (10 == dt->subsecond) {
		dt->subsecond = 0;
		dt->second++;
 2ac:	93 87       	std	Z+11, r25	; 0x0b
 2ae:	82 87       	std	Z+10, r24	; 0x0a
 2b0:	08 95       	ret
		if (60 == dt->second) {
			dt->second = 0;
 2b2:	13 86       	std	Z+11, r1	; 0x0b
 2b4:	12 86       	std	Z+10, r1	; 0x0a
			dt->minute++;
 2b6:	80 85       	ldd	r24, Z+8	; 0x08
 2b8:	91 85       	ldd	r25, Z+9	; 0x09
 2ba:	01 96       	adiw	r24, 0x01	; 1
			if (60 == dt->minute) {
 2bc:	8c 33       	cpi	r24, 0x3C	; 60
 2be:	91 05       	cpc	r25, r1
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <keep_time+0x42>
	if (10 == dt->subsecond) {
		dt->subsecond = 0;
		dt->second++;
		if (60 == dt->second) {
			dt->second = 0;
			dt->minute++;
 2c2:	91 87       	std	Z+9, r25	; 0x09
 2c4:	80 87       	std	Z+8, r24	; 0x08
 2c6:	08 95       	ret
			if (60 == dt->minute) {
				dt->minute = 0;
 2c8:	11 86       	std	Z+9, r1	; 0x09
 2ca:	10 86       	std	Z+8, r1	; 0x08
				dt->hour++;
 2cc:	86 81       	ldd	r24, Z+6	; 0x06
 2ce:	97 81       	ldd	r25, Z+7	; 0x07
 2d0:	01 96       	adiw	r24, 0x01	; 1
				if (24 == dt->hour) {
 2d2:	88 31       	cpi	r24, 0x18	; 24
 2d4:	91 05       	cpc	r25, r1
 2d6:	19 f0       	breq	.+6      	; 0x2de <keep_time+0x58>
		if (60 == dt->second) {
			dt->second = 0;
			dt->minute++;
			if (60 == dt->minute) {
				dt->minute = 0;
				dt->hour++;
 2d8:	97 83       	std	Z+7, r25	; 0x07
 2da:	86 83       	std	Z+6, r24	; 0x06
 2dc:	08 95       	ret
				if (24 == dt->hour) {
					dt->hour = 0;
 2de:	17 82       	std	Z+7, r1	; 0x07
 2e0:	16 82       	std	Z+6, r1	; 0x06
					dt->day++;
 2e2:	84 81       	ldd	r24, Z+4	; 0x04
 2e4:	95 81       	ldd	r25, Z+5	; 0x05
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	95 83       	std	Z+5, r25	; 0x05
 2ea:	84 83       	std	Z+4, r24	; 0x04
					if (dt->days_in_month+1 == dt->day) {
 2ec:	26 85       	ldd	r18, Z+14	; 0x0e
 2ee:	37 85       	ldd	r19, Z+15	; 0x0f
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	82 17       	cp	r24, r18
 2f6:	93 07       	cpc	r25, r19
 2f8:	01 f5       	brne	.+64     	; 0x33a <keep_time+0xb4>
						dt->day = 1;
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	95 83       	std	Z+5, r25	; 0x05
 300:	84 83       	std	Z+4, r24	; 0x04
						dt->month++;
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	93 81       	ldd	r25, Z+3	; 0x03
 306:	01 96       	adiw	r24, 0x01	; 1
						if (13 == dt->month) {
 308:	8d 30       	cpi	r24, 0x0D	; 13
 30a:	91 05       	cpc	r25, r1
 30c:	19 f0       	breq	.+6      	; 0x314 <keep_time+0x8e>
				if (24 == dt->hour) {
					dt->hour = 0;
					dt->day++;
					if (dt->days_in_month+1 == dt->day) {
						dt->day = 1;
						dt->month++;
 30e:	93 83       	std	Z+3, r25	; 0x03
 310:	82 83       	std	Z+2, r24	; 0x02
 312:	09 c0       	rjmp	.+18     	; 0x326 <keep_time+0xa0>
						if (13 == dt->month) {
							dt->month = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	93 83       	std	Z+3, r25	; 0x03
 31a:	82 83       	std	Z+2, r24	; 0x02
							dt->year++;
 31c:	80 81       	ld	r24, Z
 31e:	91 81       	ldd	r25, Z+1	; 0x01
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	91 83       	std	Z+1, r25	; 0x01
 324:	80 83       	st	Z, r24
						}
						dt->days_in_month = days_array[dt->month-1];
 326:	a2 81       	ldd	r26, Z+2	; 0x02
 328:	b3 81       	ldd	r27, Z+3	; 0x03
 32a:	aa 0f       	add	r26, r26
 32c:	bb 1f       	adc	r27, r27
 32e:	a4 57       	subi	r26, 0x74	; 116
 330:	bf 4f       	sbci	r27, 0xFF	; 255
 332:	8d 91       	ld	r24, X+
 334:	9c 91       	ld	r25, X
 336:	97 87       	std	Z+15, r25	; 0x0f
 338:	86 87       	std	Z+14, r24	; 0x0e
 33a:	08 95       	ret

0000033c <print_dt>:
			}
		}
	}
}

void print_dt(struct datetime * dt) {
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	0f 93       	push	r16
 342:	1f 93       	push	r17
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	a2 97       	sbiw	r28, 0x22	; 34
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	8c 01       	movw	r16, r24
	char date[17];
	sprintf(date, "%02d/%02d/%04d", dt->month, dt->day, dt->year);
 35a:	fc 01       	movw	r30, r24
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	8f 93       	push	r24
 360:	80 81       	ld	r24, Z
 362:	8f 93       	push	r24
 364:	85 81       	ldd	r24, Z+5	; 0x05
 366:	8f 93       	push	r24
 368:	84 81       	ldd	r24, Z+4	; 0x04
 36a:	8f 93       	push	r24
 36c:	83 81       	ldd	r24, Z+3	; 0x03
 36e:	8f 93       	push	r24
 370:	82 81       	ldd	r24, Z+2	; 0x02
 372:	8f 93       	push	r24
 374:	80 e7       	ldi	r24, 0x70	; 112
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	9f 93       	push	r25
 37a:	8f 93       	push	r24
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	7c 01       	movw	r14, r24
 382:	9f 93       	push	r25
 384:	8f 93       	push	r24
 386:	0e 94 19 03 	call	0x632	; 0x632 <sprintf>
	lcd_pos(0,3);
 38a:	63 e0       	ldi	r22, 0x03	; 3
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_pos>
	lcd_puts2(date);
 392:	c7 01       	movw	r24, r14
 394:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts2>
	
	char time[17];
	sprintf(time, "%02d:%02d:%02d", dt->hour, dt->minute, dt->second);
 398:	f8 01       	movw	r30, r16
 39a:	83 85       	ldd	r24, Z+11	; 0x0b
 39c:	8f 93       	push	r24
 39e:	82 85       	ldd	r24, Z+10	; 0x0a
 3a0:	8f 93       	push	r24
 3a2:	81 85       	ldd	r24, Z+9	; 0x09
 3a4:	8f 93       	push	r24
 3a6:	80 85       	ldd	r24, Z+8	; 0x08
 3a8:	8f 93       	push	r24
 3aa:	87 81       	ldd	r24, Z+7	; 0x07
 3ac:	8f 93       	push	r24
 3ae:	86 81       	ldd	r24, Z+6	; 0x06
 3b0:	8f 93       	push	r24
 3b2:	8f e7       	ldi	r24, 0x7F	; 127
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	9f 93       	push	r25
 3b8:	8f 93       	push	r24
 3ba:	8e 01       	movw	r16, r28
 3bc:	0e 5e       	subi	r16, 0xEE	; 238
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
 3c0:	1f 93       	push	r17
 3c2:	0f 93       	push	r16
 3c4:	0e 94 19 03 	call	0x632	; 0x632 <sprintf>
	lcd_pos(1,4);
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_pos>
	lcd_puts2(time);
 3d0:	c8 01       	movw	r24, r16
 3d2:	0e 94 be 00 	call	0x17c	; 0x17c <lcd_puts2>
}
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	a2 96       	adiw	r28, 0x22	; 34
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	08 95       	ret

000003fa <set_datetime>:

int set_datetime(struct datetime * dt) {
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	ec 01       	movw	r28, r24
	
	dt->second = 0;
 400:	1b 86       	std	Y+11, r1	; 0x0b
 402:	1a 86       	std	Y+10, r1	; 0x0a
	dt->subsecond = 0;
 404:	1d 86       	std	Y+13, r1	; 0x0d
 406:	1c 86       	std	Y+12, r1	; 0x0c
	
	avr_wait(100);
 408:	84 e6       	ldi	r24, 0x64	; 100
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
	int key = get_key();
 410:	0e 94 1c 01 	call	0x238	; 0x238 <get_key>
	
	if (HOTKEY == key)
 414:	84 30       	cpi	r24, 0x04	; 4
 416:	91 05       	cpc	r25, r1
 418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	a4 c0       	rjmp	.+328    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
		return 1;	
			
	switch(key) {
 41c:	fc 01       	movw	r30, r24
 41e:	31 97       	sbiw	r30, 0x01	; 1
 420:	e0 31       	cpi	r30, 0x10	; 16
 422:	f1 05       	cpc	r31, r1
 424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	98 c0       	rjmp	.+304    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 428:	e6 5d       	subi	r30, 0xD6	; 214
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__tablejump2__>
		//change month
		case 1:
			if (1 == dt->month)
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	9b 81       	ldd	r25, Y+3	; 0x03
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	91 05       	cpc	r25, r1
 438:	29 f4       	brne	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				dt->month = 12;
 43a:	8c e0       	ldi	r24, 0x0C	; 12
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	9b 83       	std	Y+3, r25	; 0x03
 440:	8a 83       	std	Y+2, r24	; 0x02
 442:	03 c0       	rjmp	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			else
				--dt->month;
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	9b 83       	std	Y+3, r25	; 0x03
 448:	8a 83       	std	Y+2, r24	; 0x02
					
			dt->days_in_month = days_array[dt->month-1];
 44a:	ea 81       	ldd	r30, Y+2	; 0x02
 44c:	fb 81       	ldd	r31, Y+3	; 0x03
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	e4 57       	subi	r30, 0x74	; 116
 454:	ff 4f       	sbci	r31, 0xFF	; 255
 456:	80 81       	ld	r24, Z
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	9f 87       	std	Y+15, r25	; 0x0f
 45c:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (dt->day > dt->days_in_month)
 45e:	2c 81       	ldd	r18, Y+4	; 0x04
 460:	3d 81       	ldd	r19, Y+5	; 0x05
 462:	82 17       	cp	r24, r18
 464:	93 07       	cpc	r25, r19
 466:	0c f0       	brlt	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	77 c0       	rjmp	.+238    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				dt->day = dt->days_in_month;
 46a:	9d 83       	std	Y+5, r25	; 0x05
 46c:	8c 83       	std	Y+4, r24	; 0x04
 46e:	74 c0       	rjmp	.+232    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
		case 2:
			dt->month = (dt->month % 12) + 1;
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	9b 81       	ldd	r25, Y+3	; 0x03
 474:	6c e0       	ldi	r22, 0x0C	; 12
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__divmodhi4>
 47c:	9c 01       	movw	r18, r24
 47e:	2f 5f       	subi	r18, 0xFF	; 255
 480:	3f 4f       	sbci	r19, 0xFF	; 255
 482:	3b 83       	std	Y+3, r19	; 0x03
 484:	2a 83       	std	Y+2, r18	; 0x02
				
			dt->days_in_month = days_array[dt->month-1];
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	fc 01       	movw	r30, r24
 48c:	e2 57       	subi	r30, 0x72	; 114
 48e:	ff 4f       	sbci	r31, 0xFF	; 255
 490:	80 81       	ld	r24, Z
 492:	91 81       	ldd	r25, Z+1	; 0x01
 494:	9f 87       	std	Y+15, r25	; 0x0f
 496:	8e 87       	std	Y+14, r24	; 0x0e
			
			if (dt->day > dt->days_in_month)
 498:	2c 81       	ldd	r18, Y+4	; 0x04
 49a:	3d 81       	ldd	r19, Y+5	; 0x05
 49c:	82 17       	cp	r24, r18
 49e:	93 07       	cpc	r25, r19
 4a0:	0c f0       	brlt	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	5a c0       	rjmp	.+180    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				dt->day = dt->days_in_month;
 4a4:	9d 83       	std	Y+5, r25	; 0x05
 4a6:	8c 83       	std	Y+4, r24	; 0x04
 4a8:	57 c0       	rjmp	.+174    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
			
		//change day	
		case 5:
			if (1 == dt->day)
 4aa:	8c 81       	ldd	r24, Y+4	; 0x04
 4ac:	9d 81       	ldd	r25, Y+5	; 0x05
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	91 05       	cpc	r25, r1
 4b2:	29 f4       	brne	.+10     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				dt->day = dt->days_in_month;
 4b4:	8e 85       	ldd	r24, Y+14	; 0x0e
 4b6:	9f 85       	ldd	r25, Y+15	; 0x0f
 4b8:	9d 83       	std	Y+5, r25	; 0x05
 4ba:	8c 83       	std	Y+4, r24	; 0x04
 4bc:	4d c0       	rjmp	.+154    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			else
				--dt->day;
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	9d 83       	std	Y+5, r25	; 0x05
 4c2:	8c 83       	std	Y+4, r24	; 0x04
 4c4:	49 c0       	rjmp	.+146    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
		case 6:
			dt->day = (dt->day % dt->days_in_month) + 1;
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ca:	6e 85       	ldd	r22, Y+14	; 0x0e
 4cc:	7f 85       	ldd	r23, Y+15	; 0x0f
 4ce:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__divmodhi4>
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	9d 83       	std	Y+5, r25	; 0x05
 4d6:	8c 83       	std	Y+4, r24	; 0x04
			break;
 4d8:	3f c0       	rjmp	.+126    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				
		//change year
		case 9:
			if (0 != dt->year)
 4da:	88 81       	ld	r24, Y
 4dc:	99 81       	ldd	r25, Y+1	; 0x01
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	d9 f1       	breq	.+118    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				--dt->year;
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	99 83       	std	Y+1, r25	; 0x01
 4e6:	88 83       	st	Y, r24
 4e8:	37 c0       	rjmp	.+110    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
		case 10:
			if (9999 != dt->year)
 4ea:	88 81       	ld	r24, Y
 4ec:	99 81       	ldd	r25, Y+1	; 0x01
 4ee:	8f 30       	cpi	r24, 0x0F	; 15
 4f0:	27 e2       	ldi	r18, 0x27	; 39
 4f2:	92 07       	cpc	r25, r18
 4f4:	89 f1       	breq	.+98     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				++dt->year;
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	99 83       	std	Y+1, r25	; 0x01
 4fa:	88 83       	st	Y, r24
 4fc:	2d c0       	rjmp	.+90     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
				
		//change hour
		case 13:
			if (0 == dt->hour)
 4fe:	8e 81       	ldd	r24, Y+6	; 0x06
 500:	9f 81       	ldd	r25, Y+7	; 0x07
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	29 f4       	brne	.+10     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
				dt->hour = 23;
 506:	87 e1       	ldi	r24, 0x17	; 23
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	9f 83       	std	Y+7, r25	; 0x07
 50c:	8e 83       	std	Y+6, r24	; 0x06
 50e:	24 c0       	rjmp	.+72     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			else
				--dt->hour;
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	9f 83       	std	Y+7, r25	; 0x07
 514:	8e 83       	std	Y+6, r24	; 0x06
 516:	20 c0       	rjmp	.+64     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
		case 14:
			dt->hour = (++dt->hour % 24);
 518:	8e 81       	ldd	r24, Y+6	; 0x06
 51a:	9f 81       	ldd	r25, Y+7	; 0x07
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	68 e1       	ldi	r22, 0x18	; 24
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__divmodhi4>
 526:	9f 83       	std	Y+7, r25	; 0x07
 528:	8e 83       	std	Y+6, r24	; 0x06
			break;
 52a:	16 c0       	rjmp	.+44     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				
		//change minute
		case 15:
			if (0 == dt->minute)
 52c:	88 85       	ldd	r24, Y+8	; 0x08
 52e:	99 85       	ldd	r25, Y+9	; 0x09
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	29 f4       	brne	.+10     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				dt->minute = 59;
 534:	8b e3       	ldi	r24, 0x3B	; 59
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	99 87       	std	Y+9, r25	; 0x09
 53a:	88 87       	std	Y+8, r24	; 0x08
 53c:	0d c0       	rjmp	.+26     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			else
				--dt->minute;
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	99 87       	std	Y+9, r25	; 0x09
 542:	88 87       	std	Y+8, r24	; 0x08
 544:	09 c0       	rjmp	.+18     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			break;
		case 16:
			dt->minute = (++dt->minute % 60);
 546:	88 85       	ldd	r24, Y+8	; 0x08
 548:	99 85       	ldd	r25, Y+9	; 0x09
 54a:	01 96       	adiw	r24, 0x01	; 1
 54c:	6c e3       	ldi	r22, 0x3C	; 60
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__divmodhi4>
 554:	99 87       	std	Y+9, r25	; 0x09
 556:	88 87       	std	Y+8, r24	; 0x08
			
		default:
			break;
	}
		
	print_dt(dt);
 558:	ce 01       	movw	r24, r28
 55a:	0e 94 9e 01 	call	0x33c	; 0x33c <print_dt>
	return 0;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
	
	avr_wait(100);
	int key = get_key();
	
	if (HOTKEY == key)
		return 1;	
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
		
	print_dt(dt);
	return 0;
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <main>:

int main(void)
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	60 97       	sbiw	r28, 0x10	; 16
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
	struct datetime dt = {2019, 3, 31, 23, 59, 30, 0, 31};
 582:	80 e1       	ldi	r24, 0x10	; 16
 584:	e0 e6       	ldi	r30, 0x60	; 96
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	de 01       	movw	r26, r28
 58a:	11 96       	adiw	r26, 0x01	; 1
 58c:	01 90       	ld	r0, Z+
 58e:	0d 92       	st	X+, r0
 590:	8a 95       	dec	r24
 592:	e1 f7       	brne	.-8      	; 0x58c <main+0x1e>
	
	lcd_init();	
 594:	0e 94 82 00 	call	0x104	; 0x104 <lcd_init>
    while (1) 
    {
		avr_wait(20);
 598:	84 e1       	ldi	r24, 0x14	; 20
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
		keep_time(&dt);
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	0e 94 43 01 	call	0x286	; 0x286 <keep_time>
		print_dt(&dt);
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	0e 94 9e 01 	call	0x33c	; 0x33c <print_dt>
		
		int key = get_key();
 5b0:	0e 94 1c 01 	call	0x238	; 0x238 <get_key>
		if (HOTKEY == key) {
 5b4:	04 97       	sbiw	r24, 0x04	; 4
 5b6:	81 f7       	brne	.-32     	; 0x598 <main+0x2a>
			avr_wait(500);
 5b8:	84 ef       	ldi	r24, 0xF4	; 244
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
			while (1) {
 				if (set_datetime(&dt)) {
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <set_datetime>
 5c8:	89 2b       	or	r24, r25
 5ca:	d1 f3       	breq	.-12     	; 0x5c0 <main+0x52>
					 avr_wait(500);
 5cc:	84 ef       	ldi	r24, 0xF4	; 244
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 70 00 	call	0xe0	; 0xe0 <avr_wait>
					break;
 5d4:	e1 cf       	rjmp	.-62     	; 0x598 <main+0x2a>

000005d6 <__divmodhi4>:
 5d6:	97 fb       	bst	r25, 7
 5d8:	07 2e       	mov	r0, r23
 5da:	16 f4       	brtc	.+4      	; 0x5e0 <__divmodhi4+0xa>
 5dc:	00 94       	com	r0
 5de:	07 d0       	rcall	.+14     	; 0x5ee <__divmodhi4_neg1>
 5e0:	77 fd       	sbrc	r23, 7
 5e2:	09 d0       	rcall	.+18     	; 0x5f6 <__divmodhi4_neg2>
 5e4:	0e 94 05 03 	call	0x60a	; 0x60a <__udivmodhi4>
 5e8:	07 fc       	sbrc	r0, 7
 5ea:	05 d0       	rcall	.+10     	; 0x5f6 <__divmodhi4_neg2>
 5ec:	3e f4       	brtc	.+14     	; 0x5fc <__divmodhi4_exit>

000005ee <__divmodhi4_neg1>:
 5ee:	90 95       	com	r25
 5f0:	81 95       	neg	r24
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	08 95       	ret

000005f6 <__divmodhi4_neg2>:
 5f6:	70 95       	com	r23
 5f8:	61 95       	neg	r22
 5fa:	7f 4f       	sbci	r23, 0xFF	; 255

000005fc <__divmodhi4_exit>:
 5fc:	08 95       	ret

000005fe <__tablejump2__>:
 5fe:	ee 0f       	add	r30, r30
 600:	ff 1f       	adc	r31, r31
 602:	05 90       	lpm	r0, Z+
 604:	f4 91       	lpm	r31, Z
 606:	e0 2d       	mov	r30, r0
 608:	09 94       	ijmp

0000060a <__udivmodhi4>:
 60a:	aa 1b       	sub	r26, r26
 60c:	bb 1b       	sub	r27, r27
 60e:	51 e1       	ldi	r21, 0x11	; 17
 610:	07 c0       	rjmp	.+14     	; 0x620 <__udivmodhi4_ep>

00000612 <__udivmodhi4_loop>:
 612:	aa 1f       	adc	r26, r26
 614:	bb 1f       	adc	r27, r27
 616:	a6 17       	cp	r26, r22
 618:	b7 07       	cpc	r27, r23
 61a:	10 f0       	brcs	.+4      	; 0x620 <__udivmodhi4_ep>
 61c:	a6 1b       	sub	r26, r22
 61e:	b7 0b       	sbc	r27, r23

00000620 <__udivmodhi4_ep>:
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	5a 95       	dec	r21
 626:	a9 f7       	brne	.-22     	; 0x612 <__udivmodhi4_loop>
 628:	80 95       	com	r24
 62a:	90 95       	com	r25
 62c:	bc 01       	movw	r22, r24
 62e:	cd 01       	movw	r24, r26
 630:	08 95       	ret

00000632 <sprintf>:
 632:	ae e0       	ldi	r26, 0x0E	; 14
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	ef e1       	ldi	r30, 0x1F	; 31
 638:	f3 e0       	ldi	r31, 0x03	; 3
 63a:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__prologue_saves__+0x1c>
 63e:	0d 89       	ldd	r16, Y+21	; 0x15
 640:	1e 89       	ldd	r17, Y+22	; 0x16
 642:	86 e0       	ldi	r24, 0x06	; 6
 644:	8c 83       	std	Y+4, r24	; 0x04
 646:	1a 83       	std	Y+2, r17	; 0x02
 648:	09 83       	std	Y+1, r16	; 0x01
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	9f e7       	ldi	r25, 0x7F	; 127
 64e:	9e 83       	std	Y+6, r25	; 0x06
 650:	8d 83       	std	Y+5, r24	; 0x05
 652:	ae 01       	movw	r20, r28
 654:	47 5e       	subi	r20, 0xE7	; 231
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	6f 89       	ldd	r22, Y+23	; 0x17
 65a:	78 8d       	ldd	r23, Y+24	; 0x18
 65c:	ce 01       	movw	r24, r28
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	0e 94 3b 03 	call	0x676	; 0x676 <vfprintf>
 664:	ef 81       	ldd	r30, Y+7	; 0x07
 666:	f8 85       	ldd	r31, Y+8	; 0x08
 668:	e0 0f       	add	r30, r16
 66a:	f1 1f       	adc	r31, r17
 66c:	10 82       	st	Z, r1
 66e:	2e 96       	adiw	r28, 0x0e	; 14
 670:	e4 e0       	ldi	r30, 0x04	; 4
 672:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__epilogue_restores__+0x1c>

00000676 <vfprintf>:
 676:	ab e0       	ldi	r26, 0x0B	; 11
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	e1 e4       	ldi	r30, 0x41	; 65
 67c:	f3 e0       	ldi	r31, 0x03	; 3
 67e:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__prologue_saves__>
 682:	6c 01       	movw	r12, r24
 684:	7b 01       	movw	r14, r22
 686:	8a 01       	movw	r16, r20
 688:	fc 01       	movw	r30, r24
 68a:	17 82       	std	Z+7, r1	; 0x07
 68c:	16 82       	std	Z+6, r1	; 0x06
 68e:	83 81       	ldd	r24, Z+3	; 0x03
 690:	81 ff       	sbrs	r24, 1
 692:	cc c1       	rjmp	.+920    	; 0xa2c <__stack+0x1cd>
 694:	ce 01       	movw	r24, r28
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	3c 01       	movw	r6, r24
 69a:	f6 01       	movw	r30, r12
 69c:	93 81       	ldd	r25, Z+3	; 0x03
 69e:	f7 01       	movw	r30, r14
 6a0:	93 fd       	sbrc	r25, 3
 6a2:	85 91       	lpm	r24, Z+
 6a4:	93 ff       	sbrs	r25, 3
 6a6:	81 91       	ld	r24, Z+
 6a8:	7f 01       	movw	r14, r30
 6aa:	88 23       	and	r24, r24
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <vfprintf+0x3a>
 6ae:	ba c1       	rjmp	.+884    	; 0xa24 <__stack+0x1c5>
 6b0:	85 32       	cpi	r24, 0x25	; 37
 6b2:	39 f4       	brne	.+14     	; 0x6c2 <vfprintf+0x4c>
 6b4:	93 fd       	sbrc	r25, 3
 6b6:	85 91       	lpm	r24, Z+
 6b8:	93 ff       	sbrs	r25, 3
 6ba:	81 91       	ld	r24, Z+
 6bc:	7f 01       	movw	r14, r30
 6be:	85 32       	cpi	r24, 0x25	; 37
 6c0:	29 f4       	brne	.+10     	; 0x6cc <vfprintf+0x56>
 6c2:	b6 01       	movw	r22, r12
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 6ca:	e7 cf       	rjmp	.-50     	; 0x69a <vfprintf+0x24>
 6cc:	91 2c       	mov	r9, r1
 6ce:	21 2c       	mov	r2, r1
 6d0:	31 2c       	mov	r3, r1
 6d2:	ff e1       	ldi	r31, 0x1F	; 31
 6d4:	f3 15       	cp	r31, r3
 6d6:	d8 f0       	brcs	.+54     	; 0x70e <vfprintf+0x98>
 6d8:	8b 32       	cpi	r24, 0x2B	; 43
 6da:	79 f0       	breq	.+30     	; 0x6fa <vfprintf+0x84>
 6dc:	38 f4       	brcc	.+14     	; 0x6ec <vfprintf+0x76>
 6de:	80 32       	cpi	r24, 0x20	; 32
 6e0:	79 f0       	breq	.+30     	; 0x700 <vfprintf+0x8a>
 6e2:	83 32       	cpi	r24, 0x23	; 35
 6e4:	a1 f4       	brne	.+40     	; 0x70e <vfprintf+0x98>
 6e6:	23 2d       	mov	r18, r3
 6e8:	20 61       	ori	r18, 0x10	; 16
 6ea:	1d c0       	rjmp	.+58     	; 0x726 <vfprintf+0xb0>
 6ec:	8d 32       	cpi	r24, 0x2D	; 45
 6ee:	61 f0       	breq	.+24     	; 0x708 <vfprintf+0x92>
 6f0:	80 33       	cpi	r24, 0x30	; 48
 6f2:	69 f4       	brne	.+26     	; 0x70e <vfprintf+0x98>
 6f4:	23 2d       	mov	r18, r3
 6f6:	21 60       	ori	r18, 0x01	; 1
 6f8:	16 c0       	rjmp	.+44     	; 0x726 <vfprintf+0xb0>
 6fa:	83 2d       	mov	r24, r3
 6fc:	82 60       	ori	r24, 0x02	; 2
 6fe:	38 2e       	mov	r3, r24
 700:	e3 2d       	mov	r30, r3
 702:	e4 60       	ori	r30, 0x04	; 4
 704:	3e 2e       	mov	r3, r30
 706:	2a c0       	rjmp	.+84     	; 0x75c <vfprintf+0xe6>
 708:	f3 2d       	mov	r31, r3
 70a:	f8 60       	ori	r31, 0x08	; 8
 70c:	1d c0       	rjmp	.+58     	; 0x748 <vfprintf+0xd2>
 70e:	37 fc       	sbrc	r3, 7
 710:	2d c0       	rjmp	.+90     	; 0x76c <vfprintf+0xf6>
 712:	20 ed       	ldi	r18, 0xD0	; 208
 714:	28 0f       	add	r18, r24
 716:	2a 30       	cpi	r18, 0x0A	; 10
 718:	40 f0       	brcs	.+16     	; 0x72a <vfprintf+0xb4>
 71a:	8e 32       	cpi	r24, 0x2E	; 46
 71c:	b9 f4       	brne	.+46     	; 0x74c <vfprintf+0xd6>
 71e:	36 fc       	sbrc	r3, 6
 720:	81 c1       	rjmp	.+770    	; 0xa24 <__stack+0x1c5>
 722:	23 2d       	mov	r18, r3
 724:	20 64       	ori	r18, 0x40	; 64
 726:	32 2e       	mov	r3, r18
 728:	19 c0       	rjmp	.+50     	; 0x75c <vfprintf+0xe6>
 72a:	36 fe       	sbrs	r3, 6
 72c:	06 c0       	rjmp	.+12     	; 0x73a <vfprintf+0xc4>
 72e:	8a e0       	ldi	r24, 0x0A	; 10
 730:	98 9e       	mul	r9, r24
 732:	20 0d       	add	r18, r0
 734:	11 24       	eor	r1, r1
 736:	92 2e       	mov	r9, r18
 738:	11 c0       	rjmp	.+34     	; 0x75c <vfprintf+0xe6>
 73a:	ea e0       	ldi	r30, 0x0A	; 10
 73c:	2e 9e       	mul	r2, r30
 73e:	20 0d       	add	r18, r0
 740:	11 24       	eor	r1, r1
 742:	22 2e       	mov	r2, r18
 744:	f3 2d       	mov	r31, r3
 746:	f0 62       	ori	r31, 0x20	; 32
 748:	3f 2e       	mov	r3, r31
 74a:	08 c0       	rjmp	.+16     	; 0x75c <vfprintf+0xe6>
 74c:	8c 36       	cpi	r24, 0x6C	; 108
 74e:	21 f4       	brne	.+8      	; 0x758 <vfprintf+0xe2>
 750:	83 2d       	mov	r24, r3
 752:	80 68       	ori	r24, 0x80	; 128
 754:	38 2e       	mov	r3, r24
 756:	02 c0       	rjmp	.+4      	; 0x75c <vfprintf+0xe6>
 758:	88 36       	cpi	r24, 0x68	; 104
 75a:	41 f4       	brne	.+16     	; 0x76c <vfprintf+0xf6>
 75c:	f7 01       	movw	r30, r14
 75e:	93 fd       	sbrc	r25, 3
 760:	85 91       	lpm	r24, Z+
 762:	93 ff       	sbrs	r25, 3
 764:	81 91       	ld	r24, Z+
 766:	7f 01       	movw	r14, r30
 768:	81 11       	cpse	r24, r1
 76a:	b3 cf       	rjmp	.-154    	; 0x6d2 <vfprintf+0x5c>
 76c:	98 2f       	mov	r25, r24
 76e:	9f 7d       	andi	r25, 0xDF	; 223
 770:	95 54       	subi	r25, 0x45	; 69
 772:	93 30       	cpi	r25, 0x03	; 3
 774:	28 f4       	brcc	.+10     	; 0x780 <vfprintf+0x10a>
 776:	0c 5f       	subi	r16, 0xFC	; 252
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	9f e3       	ldi	r25, 0x3F	; 63
 77c:	99 83       	std	Y+1, r25	; 0x01
 77e:	0d c0       	rjmp	.+26     	; 0x79a <vfprintf+0x124>
 780:	83 36       	cpi	r24, 0x63	; 99
 782:	31 f0       	breq	.+12     	; 0x790 <vfprintf+0x11a>
 784:	83 37       	cpi	r24, 0x73	; 115
 786:	71 f0       	breq	.+28     	; 0x7a4 <vfprintf+0x12e>
 788:	83 35       	cpi	r24, 0x53	; 83
 78a:	09 f0       	breq	.+2      	; 0x78e <vfprintf+0x118>
 78c:	59 c0       	rjmp	.+178    	; 0x840 <vfprintf+0x1ca>
 78e:	21 c0       	rjmp	.+66     	; 0x7d2 <vfprintf+0x15c>
 790:	f8 01       	movw	r30, r16
 792:	80 81       	ld	r24, Z
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	0e 5f       	subi	r16, 0xFE	; 254
 798:	1f 4f       	sbci	r17, 0xFF	; 255
 79a:	88 24       	eor	r8, r8
 79c:	83 94       	inc	r8
 79e:	91 2c       	mov	r9, r1
 7a0:	53 01       	movw	r10, r6
 7a2:	13 c0       	rjmp	.+38     	; 0x7ca <vfprintf+0x154>
 7a4:	28 01       	movw	r4, r16
 7a6:	f2 e0       	ldi	r31, 0x02	; 2
 7a8:	4f 0e       	add	r4, r31
 7aa:	51 1c       	adc	r5, r1
 7ac:	f8 01       	movw	r30, r16
 7ae:	a0 80       	ld	r10, Z
 7b0:	b1 80       	ldd	r11, Z+1	; 0x01
 7b2:	36 fe       	sbrs	r3, 6
 7b4:	03 c0       	rjmp	.+6      	; 0x7bc <vfprintf+0x146>
 7b6:	69 2d       	mov	r22, r9
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <vfprintf+0x14a>
 7bc:	6f ef       	ldi	r22, 0xFF	; 255
 7be:	7f ef       	ldi	r23, 0xFF	; 255
 7c0:	c5 01       	movw	r24, r10
 7c2:	0e 94 27 05 	call	0xa4e	; 0xa4e <strnlen>
 7c6:	4c 01       	movw	r8, r24
 7c8:	82 01       	movw	r16, r4
 7ca:	f3 2d       	mov	r31, r3
 7cc:	ff 77       	andi	r31, 0x7F	; 127
 7ce:	3f 2e       	mov	r3, r31
 7d0:	16 c0       	rjmp	.+44     	; 0x7fe <vfprintf+0x188>
 7d2:	28 01       	movw	r4, r16
 7d4:	22 e0       	ldi	r18, 0x02	; 2
 7d6:	42 0e       	add	r4, r18
 7d8:	51 1c       	adc	r5, r1
 7da:	f8 01       	movw	r30, r16
 7dc:	a0 80       	ld	r10, Z
 7de:	b1 80       	ldd	r11, Z+1	; 0x01
 7e0:	36 fe       	sbrs	r3, 6
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <vfprintf+0x174>
 7e4:	69 2d       	mov	r22, r9
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x178>
 7ea:	6f ef       	ldi	r22, 0xFF	; 255
 7ec:	7f ef       	ldi	r23, 0xFF	; 255
 7ee:	c5 01       	movw	r24, r10
 7f0:	0e 94 1c 05 	call	0xa38	; 0xa38 <strnlen_P>
 7f4:	4c 01       	movw	r8, r24
 7f6:	f3 2d       	mov	r31, r3
 7f8:	f0 68       	ori	r31, 0x80	; 128
 7fa:	3f 2e       	mov	r3, r31
 7fc:	82 01       	movw	r16, r4
 7fe:	33 fc       	sbrc	r3, 3
 800:	1b c0       	rjmp	.+54     	; 0x838 <vfprintf+0x1c2>
 802:	82 2d       	mov	r24, r2
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	88 16       	cp	r8, r24
 808:	99 06       	cpc	r9, r25
 80a:	b0 f4       	brcc	.+44     	; 0x838 <vfprintf+0x1c2>
 80c:	b6 01       	movw	r22, r12
 80e:	80 e2       	ldi	r24, 0x20	; 32
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 816:	2a 94       	dec	r2
 818:	f4 cf       	rjmp	.-24     	; 0x802 <vfprintf+0x18c>
 81a:	f5 01       	movw	r30, r10
 81c:	37 fc       	sbrc	r3, 7
 81e:	85 91       	lpm	r24, Z+
 820:	37 fe       	sbrs	r3, 7
 822:	81 91       	ld	r24, Z+
 824:	5f 01       	movw	r10, r30
 826:	b6 01       	movw	r22, r12
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 82e:	21 10       	cpse	r2, r1
 830:	2a 94       	dec	r2
 832:	21 e0       	ldi	r18, 0x01	; 1
 834:	82 1a       	sub	r8, r18
 836:	91 08       	sbc	r9, r1
 838:	81 14       	cp	r8, r1
 83a:	91 04       	cpc	r9, r1
 83c:	71 f7       	brne	.-36     	; 0x81a <vfprintf+0x1a4>
 83e:	e8 c0       	rjmp	.+464    	; 0xa10 <__stack+0x1b1>
 840:	84 36       	cpi	r24, 0x64	; 100
 842:	11 f0       	breq	.+4      	; 0x848 <vfprintf+0x1d2>
 844:	89 36       	cpi	r24, 0x69	; 105
 846:	41 f5       	brne	.+80     	; 0x898 <__stack+0x39>
 848:	f8 01       	movw	r30, r16
 84a:	37 fe       	sbrs	r3, 7
 84c:	07 c0       	rjmp	.+14     	; 0x85c <vfprintf+0x1e6>
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	82 81       	ldd	r24, Z+2	; 0x02
 854:	93 81       	ldd	r25, Z+3	; 0x03
 856:	0c 5f       	subi	r16, 0xFC	; 252
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	08 c0       	rjmp	.+16     	; 0x86c <__stack+0xd>
 85c:	60 81       	ld	r22, Z
 85e:	71 81       	ldd	r23, Z+1	; 0x01
 860:	07 2e       	mov	r0, r23
 862:	00 0c       	add	r0, r0
 864:	88 0b       	sbc	r24, r24
 866:	99 0b       	sbc	r25, r25
 868:	0e 5f       	subi	r16, 0xFE	; 254
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	f3 2d       	mov	r31, r3
 86e:	ff 76       	andi	r31, 0x6F	; 111
 870:	3f 2e       	mov	r3, r31
 872:	97 ff       	sbrs	r25, 7
 874:	09 c0       	rjmp	.+18     	; 0x888 <__stack+0x29>
 876:	90 95       	com	r25
 878:	80 95       	com	r24
 87a:	70 95       	com	r23
 87c:	61 95       	neg	r22
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	8f 4f       	sbci	r24, 0xFF	; 255
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	f0 68       	ori	r31, 0x80	; 128
 886:	3f 2e       	mov	r3, r31
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	a3 01       	movw	r20, r6
 88e:	0e 94 6e 05 	call	0xadc	; 0xadc <__ultoa_invert>
 892:	88 2e       	mov	r8, r24
 894:	86 18       	sub	r8, r6
 896:	45 c0       	rjmp	.+138    	; 0x922 <__stack+0xc3>
 898:	85 37       	cpi	r24, 0x75	; 117
 89a:	31 f4       	brne	.+12     	; 0x8a8 <__stack+0x49>
 89c:	23 2d       	mov	r18, r3
 89e:	2f 7e       	andi	r18, 0xEF	; 239
 8a0:	b2 2e       	mov	r11, r18
 8a2:	2a e0       	ldi	r18, 0x0A	; 10
 8a4:	30 e0       	ldi	r19, 0x00	; 0
 8a6:	25 c0       	rjmp	.+74     	; 0x8f2 <__stack+0x93>
 8a8:	93 2d       	mov	r25, r3
 8aa:	99 7f       	andi	r25, 0xF9	; 249
 8ac:	b9 2e       	mov	r11, r25
 8ae:	8f 36       	cpi	r24, 0x6F	; 111
 8b0:	c1 f0       	breq	.+48     	; 0x8e2 <__stack+0x83>
 8b2:	18 f4       	brcc	.+6      	; 0x8ba <__stack+0x5b>
 8b4:	88 35       	cpi	r24, 0x58	; 88
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <__stack+0x77>
 8b8:	b5 c0       	rjmp	.+362    	; 0xa24 <__stack+0x1c5>
 8ba:	80 37       	cpi	r24, 0x70	; 112
 8bc:	19 f0       	breq	.+6      	; 0x8c4 <__stack+0x65>
 8be:	88 37       	cpi	r24, 0x78	; 120
 8c0:	21 f0       	breq	.+8      	; 0x8ca <__stack+0x6b>
 8c2:	b0 c0       	rjmp	.+352    	; 0xa24 <__stack+0x1c5>
 8c4:	e9 2f       	mov	r30, r25
 8c6:	e0 61       	ori	r30, 0x10	; 16
 8c8:	be 2e       	mov	r11, r30
 8ca:	b4 fe       	sbrs	r11, 4
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <__stack+0x89>
 8ce:	fb 2d       	mov	r31, r11
 8d0:	f4 60       	ori	r31, 0x04	; 4
 8d2:	bf 2e       	mov	r11, r31
 8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__stack+0x89>
 8d6:	34 fe       	sbrs	r3, 4
 8d8:	0a c0       	rjmp	.+20     	; 0x8ee <__stack+0x8f>
 8da:	29 2f       	mov	r18, r25
 8dc:	26 60       	ori	r18, 0x06	; 6
 8de:	b2 2e       	mov	r11, r18
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <__stack+0x8f>
 8e2:	28 e0       	ldi	r18, 0x08	; 8
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <__stack+0x93>
 8e8:	20 e1       	ldi	r18, 0x10	; 16
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	20 e1       	ldi	r18, 0x10	; 16
 8f0:	32 e0       	ldi	r19, 0x02	; 2
 8f2:	f8 01       	movw	r30, r16
 8f4:	b7 fe       	sbrs	r11, 7
 8f6:	07 c0       	rjmp	.+14     	; 0x906 <__stack+0xa7>
 8f8:	60 81       	ld	r22, Z
 8fa:	71 81       	ldd	r23, Z+1	; 0x01
 8fc:	82 81       	ldd	r24, Z+2	; 0x02
 8fe:	93 81       	ldd	r25, Z+3	; 0x03
 900:	0c 5f       	subi	r16, 0xFC	; 252
 902:	1f 4f       	sbci	r17, 0xFF	; 255
 904:	06 c0       	rjmp	.+12     	; 0x912 <__stack+0xb3>
 906:	60 81       	ld	r22, Z
 908:	71 81       	ldd	r23, Z+1	; 0x01
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 5f       	subi	r16, 0xFE	; 254
 910:	1f 4f       	sbci	r17, 0xFF	; 255
 912:	a3 01       	movw	r20, r6
 914:	0e 94 6e 05 	call	0xadc	; 0xadc <__ultoa_invert>
 918:	88 2e       	mov	r8, r24
 91a:	86 18       	sub	r8, r6
 91c:	fb 2d       	mov	r31, r11
 91e:	ff 77       	andi	r31, 0x7F	; 127
 920:	3f 2e       	mov	r3, r31
 922:	36 fe       	sbrs	r3, 6
 924:	0d c0       	rjmp	.+26     	; 0x940 <__stack+0xe1>
 926:	23 2d       	mov	r18, r3
 928:	2e 7f       	andi	r18, 0xFE	; 254
 92a:	a2 2e       	mov	r10, r18
 92c:	89 14       	cp	r8, r9
 92e:	58 f4       	brcc	.+22     	; 0x946 <__stack+0xe7>
 930:	34 fe       	sbrs	r3, 4
 932:	0b c0       	rjmp	.+22     	; 0x94a <__stack+0xeb>
 934:	32 fc       	sbrc	r3, 2
 936:	09 c0       	rjmp	.+18     	; 0x94a <__stack+0xeb>
 938:	83 2d       	mov	r24, r3
 93a:	8e 7e       	andi	r24, 0xEE	; 238
 93c:	a8 2e       	mov	r10, r24
 93e:	05 c0       	rjmp	.+10     	; 0x94a <__stack+0xeb>
 940:	b8 2c       	mov	r11, r8
 942:	a3 2c       	mov	r10, r3
 944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0xed>
 946:	b8 2c       	mov	r11, r8
 948:	01 c0       	rjmp	.+2      	; 0x94c <__stack+0xed>
 94a:	b9 2c       	mov	r11, r9
 94c:	a4 fe       	sbrs	r10, 4
 94e:	0f c0       	rjmp	.+30     	; 0x96e <__stack+0x10f>
 950:	fe 01       	movw	r30, r28
 952:	e8 0d       	add	r30, r8
 954:	f1 1d       	adc	r31, r1
 956:	80 81       	ld	r24, Z
 958:	80 33       	cpi	r24, 0x30	; 48
 95a:	21 f4       	brne	.+8      	; 0x964 <__stack+0x105>
 95c:	9a 2d       	mov	r25, r10
 95e:	99 7e       	andi	r25, 0xE9	; 233
 960:	a9 2e       	mov	r10, r25
 962:	09 c0       	rjmp	.+18     	; 0x976 <__stack+0x117>
 964:	a2 fe       	sbrs	r10, 2
 966:	06 c0       	rjmp	.+12     	; 0x974 <__stack+0x115>
 968:	b3 94       	inc	r11
 96a:	b3 94       	inc	r11
 96c:	04 c0       	rjmp	.+8      	; 0x976 <__stack+0x117>
 96e:	8a 2d       	mov	r24, r10
 970:	86 78       	andi	r24, 0x86	; 134
 972:	09 f0       	breq	.+2      	; 0x976 <__stack+0x117>
 974:	b3 94       	inc	r11
 976:	a3 fc       	sbrc	r10, 3
 978:	11 c0       	rjmp	.+34     	; 0x99c <__stack+0x13d>
 97a:	a0 fe       	sbrs	r10, 0
 97c:	06 c0       	rjmp	.+12     	; 0x98a <__stack+0x12b>
 97e:	b2 14       	cp	r11, r2
 980:	88 f4       	brcc	.+34     	; 0x9a4 <__stack+0x145>
 982:	28 0c       	add	r2, r8
 984:	92 2c       	mov	r9, r2
 986:	9b 18       	sub	r9, r11
 988:	0e c0       	rjmp	.+28     	; 0x9a6 <__stack+0x147>
 98a:	b2 14       	cp	r11, r2
 98c:	60 f4       	brcc	.+24     	; 0x9a6 <__stack+0x147>
 98e:	b6 01       	movw	r22, r12
 990:	80 e2       	ldi	r24, 0x20	; 32
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 998:	b3 94       	inc	r11
 99a:	f7 cf       	rjmp	.-18     	; 0x98a <__stack+0x12b>
 99c:	b2 14       	cp	r11, r2
 99e:	18 f4       	brcc	.+6      	; 0x9a6 <__stack+0x147>
 9a0:	2b 18       	sub	r2, r11
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0x149>
 9a4:	98 2c       	mov	r9, r8
 9a6:	21 2c       	mov	r2, r1
 9a8:	a4 fe       	sbrs	r10, 4
 9aa:	10 c0       	rjmp	.+32     	; 0x9cc <__stack+0x16d>
 9ac:	b6 01       	movw	r22, r12
 9ae:	80 e3       	ldi	r24, 0x30	; 48
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 9b6:	a2 fe       	sbrs	r10, 2
 9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__stack+0x189>
 9ba:	a1 fc       	sbrc	r10, 1
 9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <__stack+0x165>
 9be:	88 e7       	ldi	r24, 0x78	; 120
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0x169>
 9c4:	88 e5       	ldi	r24, 0x58	; 88
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	b6 01       	movw	r22, r12
 9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <__stack+0x185>
 9cc:	8a 2d       	mov	r24, r10
 9ce:	86 78       	andi	r24, 0x86	; 134
 9d0:	59 f0       	breq	.+22     	; 0x9e8 <__stack+0x189>
 9d2:	a1 fe       	sbrs	r10, 1
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0x17b>
 9d6:	8b e2       	ldi	r24, 0x2B	; 43
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0x17d>
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	a7 fc       	sbrc	r10, 7
 9de:	8d e2       	ldi	r24, 0x2D	; 45
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 9e8:	89 14       	cp	r8, r9
 9ea:	38 f4       	brcc	.+14     	; 0x9fa <__stack+0x19b>
 9ec:	b6 01       	movw	r22, r12
 9ee:	80 e3       	ldi	r24, 0x30	; 48
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 9f6:	9a 94       	dec	r9
 9f8:	f7 cf       	rjmp	.-18     	; 0x9e8 <__stack+0x189>
 9fa:	8a 94       	dec	r8
 9fc:	f3 01       	movw	r30, r6
 9fe:	e8 0d       	add	r30, r8
 a00:	f1 1d       	adc	r31, r1
 a02:	80 81       	ld	r24, Z
 a04:	b6 01       	movw	r22, r12
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 a0c:	81 10       	cpse	r8, r1
 a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <__stack+0x19b>
 a10:	22 20       	and	r2, r2
 a12:	09 f4       	brne	.+2      	; 0xa16 <__stack+0x1b7>
 a14:	42 ce       	rjmp	.-892    	; 0x69a <vfprintf+0x24>
 a16:	b6 01       	movw	r22, r12
 a18:	80 e2       	ldi	r24, 0x20	; 32
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 32 05 	call	0xa64	; 0xa64 <fputc>
 a20:	2a 94       	dec	r2
 a22:	f6 cf       	rjmp	.-20     	; 0xa10 <__stack+0x1b1>
 a24:	f6 01       	movw	r30, r12
 a26:	86 81       	ldd	r24, Z+6	; 0x06
 a28:	97 81       	ldd	r25, Z+7	; 0x07
 a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__stack+0x1d1>
 a2c:	8f ef       	ldi	r24, 0xFF	; 255
 a2e:	9f ef       	ldi	r25, 0xFF	; 255
 a30:	2b 96       	adiw	r28, 0x0b	; 11
 a32:	e2 e1       	ldi	r30, 0x12	; 18
 a34:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__epilogue_restores__>

00000a38 <strnlen_P>:
 a38:	fc 01       	movw	r30, r24
 a3a:	05 90       	lpm	r0, Z+
 a3c:	61 50       	subi	r22, 0x01	; 1
 a3e:	70 40       	sbci	r23, 0x00	; 0
 a40:	01 10       	cpse	r0, r1
 a42:	d8 f7       	brcc	.-10     	; 0xa3a <strnlen_P+0x2>
 a44:	80 95       	com	r24
 a46:	90 95       	com	r25
 a48:	8e 0f       	add	r24, r30
 a4a:	9f 1f       	adc	r25, r31
 a4c:	08 95       	ret

00000a4e <strnlen>:
 a4e:	fc 01       	movw	r30, r24
 a50:	61 50       	subi	r22, 0x01	; 1
 a52:	70 40       	sbci	r23, 0x00	; 0
 a54:	01 90       	ld	r0, Z+
 a56:	01 10       	cpse	r0, r1
 a58:	d8 f7       	brcc	.-10     	; 0xa50 <strnlen+0x2>
 a5a:	80 95       	com	r24
 a5c:	90 95       	com	r25
 a5e:	8e 0f       	add	r24, r30
 a60:	9f 1f       	adc	r25, r31
 a62:	08 95       	ret

00000a64 <fputc>:
 a64:	0f 93       	push	r16
 a66:	1f 93       	push	r17
 a68:	cf 93       	push	r28
 a6a:	df 93       	push	r29
 a6c:	fb 01       	movw	r30, r22
 a6e:	23 81       	ldd	r18, Z+3	; 0x03
 a70:	21 fd       	sbrc	r18, 1
 a72:	03 c0       	rjmp	.+6      	; 0xa7a <fputc+0x16>
 a74:	8f ef       	ldi	r24, 0xFF	; 255
 a76:	9f ef       	ldi	r25, 0xFF	; 255
 a78:	2c c0       	rjmp	.+88     	; 0xad2 <fputc+0x6e>
 a7a:	22 ff       	sbrs	r18, 2
 a7c:	16 c0       	rjmp	.+44     	; 0xaaa <fputc+0x46>
 a7e:	46 81       	ldd	r20, Z+6	; 0x06
 a80:	57 81       	ldd	r21, Z+7	; 0x07
 a82:	24 81       	ldd	r18, Z+4	; 0x04
 a84:	35 81       	ldd	r19, Z+5	; 0x05
 a86:	42 17       	cp	r20, r18
 a88:	53 07       	cpc	r21, r19
 a8a:	44 f4       	brge	.+16     	; 0xa9c <fputc+0x38>
 a8c:	a0 81       	ld	r26, Z
 a8e:	b1 81       	ldd	r27, Z+1	; 0x01
 a90:	9d 01       	movw	r18, r26
 a92:	2f 5f       	subi	r18, 0xFF	; 255
 a94:	3f 4f       	sbci	r19, 0xFF	; 255
 a96:	31 83       	std	Z+1, r19	; 0x01
 a98:	20 83       	st	Z, r18
 a9a:	8c 93       	st	X, r24
 a9c:	26 81       	ldd	r18, Z+6	; 0x06
 a9e:	37 81       	ldd	r19, Z+7	; 0x07
 aa0:	2f 5f       	subi	r18, 0xFF	; 255
 aa2:	3f 4f       	sbci	r19, 0xFF	; 255
 aa4:	37 83       	std	Z+7, r19	; 0x07
 aa6:	26 83       	std	Z+6, r18	; 0x06
 aa8:	14 c0       	rjmp	.+40     	; 0xad2 <fputc+0x6e>
 aaa:	8b 01       	movw	r16, r22
 aac:	ec 01       	movw	r28, r24
 aae:	fb 01       	movw	r30, r22
 ab0:	00 84       	ldd	r0, Z+8	; 0x08
 ab2:	f1 85       	ldd	r31, Z+9	; 0x09
 ab4:	e0 2d       	mov	r30, r0
 ab6:	09 95       	icall
 ab8:	89 2b       	or	r24, r25
 aba:	e1 f6       	brne	.-72     	; 0xa74 <fputc+0x10>
 abc:	d8 01       	movw	r26, r16
 abe:	16 96       	adiw	r26, 0x06	; 6
 ac0:	8d 91       	ld	r24, X+
 ac2:	9c 91       	ld	r25, X
 ac4:	17 97       	sbiw	r26, 0x07	; 7
 ac6:	01 96       	adiw	r24, 0x01	; 1
 ac8:	17 96       	adiw	r26, 0x07	; 7
 aca:	9c 93       	st	X, r25
 acc:	8e 93       	st	-X, r24
 ace:	16 97       	sbiw	r26, 0x06	; 6
 ad0:	ce 01       	movw	r24, r28
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	1f 91       	pop	r17
 ad8:	0f 91       	pop	r16
 ada:	08 95       	ret

00000adc <__ultoa_invert>:
 adc:	fa 01       	movw	r30, r20
 ade:	aa 27       	eor	r26, r26
 ae0:	28 30       	cpi	r18, 0x08	; 8
 ae2:	51 f1       	breq	.+84     	; 0xb38 <__ultoa_invert+0x5c>
 ae4:	20 31       	cpi	r18, 0x10	; 16
 ae6:	81 f1       	breq	.+96     	; 0xb48 <__ultoa_invert+0x6c>
 ae8:	e8 94       	clt
 aea:	6f 93       	push	r22
 aec:	6e 7f       	andi	r22, 0xFE	; 254
 aee:	6e 5f       	subi	r22, 0xFE	; 254
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	8f 4f       	sbci	r24, 0xFF	; 255
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	af 4f       	sbci	r26, 0xFF	; 255
 af8:	b1 e0       	ldi	r27, 0x01	; 1
 afa:	3e d0       	rcall	.+124    	; 0xb78 <__ultoa_invert+0x9c>
 afc:	b4 e0       	ldi	r27, 0x04	; 4
 afe:	3c d0       	rcall	.+120    	; 0xb78 <__ultoa_invert+0x9c>
 b00:	67 0f       	add	r22, r23
 b02:	78 1f       	adc	r23, r24
 b04:	89 1f       	adc	r24, r25
 b06:	9a 1f       	adc	r25, r26
 b08:	a1 1d       	adc	r26, r1
 b0a:	68 0f       	add	r22, r24
 b0c:	79 1f       	adc	r23, r25
 b0e:	8a 1f       	adc	r24, r26
 b10:	91 1d       	adc	r25, r1
 b12:	a1 1d       	adc	r26, r1
 b14:	6a 0f       	add	r22, r26
 b16:	71 1d       	adc	r23, r1
 b18:	81 1d       	adc	r24, r1
 b1a:	91 1d       	adc	r25, r1
 b1c:	a1 1d       	adc	r26, r1
 b1e:	20 d0       	rcall	.+64     	; 0xb60 <__ultoa_invert+0x84>
 b20:	09 f4       	brne	.+2      	; 0xb24 <__ultoa_invert+0x48>
 b22:	68 94       	set
 b24:	3f 91       	pop	r19
 b26:	2a e0       	ldi	r18, 0x0A	; 10
 b28:	26 9f       	mul	r18, r22
 b2a:	11 24       	eor	r1, r1
 b2c:	30 19       	sub	r19, r0
 b2e:	30 5d       	subi	r19, 0xD0	; 208
 b30:	31 93       	st	Z+, r19
 b32:	de f6       	brtc	.-74     	; 0xaea <__ultoa_invert+0xe>
 b34:	cf 01       	movw	r24, r30
 b36:	08 95       	ret
 b38:	46 2f       	mov	r20, r22
 b3a:	47 70       	andi	r20, 0x07	; 7
 b3c:	40 5d       	subi	r20, 0xD0	; 208
 b3e:	41 93       	st	Z+, r20
 b40:	b3 e0       	ldi	r27, 0x03	; 3
 b42:	0f d0       	rcall	.+30     	; 0xb62 <__ultoa_invert+0x86>
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__ultoa_invert+0x5c>
 b46:	f6 cf       	rjmp	.-20     	; 0xb34 <__ultoa_invert+0x58>
 b48:	46 2f       	mov	r20, r22
 b4a:	4f 70       	andi	r20, 0x0F	; 15
 b4c:	40 5d       	subi	r20, 0xD0	; 208
 b4e:	4a 33       	cpi	r20, 0x3A	; 58
 b50:	18 f0       	brcs	.+6      	; 0xb58 <__ultoa_invert+0x7c>
 b52:	49 5d       	subi	r20, 0xD9	; 217
 b54:	31 fd       	sbrc	r19, 1
 b56:	40 52       	subi	r20, 0x20	; 32
 b58:	41 93       	st	Z+, r20
 b5a:	02 d0       	rcall	.+4      	; 0xb60 <__ultoa_invert+0x84>
 b5c:	a9 f7       	brne	.-22     	; 0xb48 <__ultoa_invert+0x6c>
 b5e:	ea cf       	rjmp	.-44     	; 0xb34 <__ultoa_invert+0x58>
 b60:	b4 e0       	ldi	r27, 0x04	; 4
 b62:	a6 95       	lsr	r26
 b64:	97 95       	ror	r25
 b66:	87 95       	ror	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	ba 95       	dec	r27
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__ultoa_invert+0x86>
 b70:	00 97       	sbiw	r24, 0x00	; 0
 b72:	61 05       	cpc	r22, r1
 b74:	71 05       	cpc	r23, r1
 b76:	08 95       	ret
 b78:	9b 01       	movw	r18, r22
 b7a:	ac 01       	movw	r20, r24
 b7c:	0a 2e       	mov	r0, r26
 b7e:	06 94       	lsr	r0
 b80:	57 95       	ror	r21
 b82:	47 95       	ror	r20
 b84:	37 95       	ror	r19
 b86:	27 95       	ror	r18
 b88:	ba 95       	dec	r27
 b8a:	c9 f7       	brne	.-14     	; 0xb7e <__ultoa_invert+0xa2>
 b8c:	62 0f       	add	r22, r18
 b8e:	73 1f       	adc	r23, r19
 b90:	84 1f       	adc	r24, r20
 b92:	95 1f       	adc	r25, r21
 b94:	a0 1d       	adc	r26, r0
 b96:	08 95       	ret

00000b98 <__prologue_saves__>:
 b98:	2f 92       	push	r2
 b9a:	3f 92       	push	r3
 b9c:	4f 92       	push	r4
 b9e:	5f 92       	push	r5
 ba0:	6f 92       	push	r6
 ba2:	7f 92       	push	r7
 ba4:	8f 92       	push	r8
 ba6:	9f 92       	push	r9
 ba8:	af 92       	push	r10
 baa:	bf 92       	push	r11
 bac:	cf 92       	push	r12
 bae:	df 92       	push	r13
 bb0:	ef 92       	push	r14
 bb2:	ff 92       	push	r15
 bb4:	0f 93       	push	r16
 bb6:	1f 93       	push	r17
 bb8:	cf 93       	push	r28
 bba:	df 93       	push	r29
 bbc:	cd b7       	in	r28, 0x3d	; 61
 bbe:	de b7       	in	r29, 0x3e	; 62
 bc0:	ca 1b       	sub	r28, r26
 bc2:	db 0b       	sbc	r29, r27
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
 bce:	09 94       	ijmp

00000bd0 <__epilogue_restores__>:
 bd0:	2a 88       	ldd	r2, Y+18	; 0x12
 bd2:	39 88       	ldd	r3, Y+17	; 0x11
 bd4:	48 88       	ldd	r4, Y+16	; 0x10
 bd6:	5f 84       	ldd	r5, Y+15	; 0x0f
 bd8:	6e 84       	ldd	r6, Y+14	; 0x0e
 bda:	7d 84       	ldd	r7, Y+13	; 0x0d
 bdc:	8c 84       	ldd	r8, Y+12	; 0x0c
 bde:	9b 84       	ldd	r9, Y+11	; 0x0b
 be0:	aa 84       	ldd	r10, Y+10	; 0x0a
 be2:	b9 84       	ldd	r11, Y+9	; 0x09
 be4:	c8 84       	ldd	r12, Y+8	; 0x08
 be6:	df 80       	ldd	r13, Y+7	; 0x07
 be8:	ee 80       	ldd	r14, Y+6	; 0x06
 bea:	fd 80       	ldd	r15, Y+5	; 0x05
 bec:	0c 81       	ldd	r16, Y+4	; 0x04
 bee:	1b 81       	ldd	r17, Y+3	; 0x03
 bf0:	aa 81       	ldd	r26, Y+2	; 0x02
 bf2:	b9 81       	ldd	r27, Y+1	; 0x01
 bf4:	ce 0f       	add	r28, r30
 bf6:	d1 1d       	adc	r29, r1
 bf8:	0f b6       	in	r0, 0x3f	; 63
 bfa:	f8 94       	cli
 bfc:	de bf       	out	0x3e, r29	; 62
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	cd bf       	out	0x3d, r28	; 61
 c02:	ed 01       	movw	r28, r26
 c04:	08 95       	ret

00000c06 <_exit>:
 c06:	f8 94       	cli

00000c08 <__stop_program>:
 c08:	ff cf       	rjmp	.-2      	; 0xc08 <__stop_program>
